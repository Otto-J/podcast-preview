WEBVTT

1
00:00:00.000 --> 00:00:04.280
[WebWorker]

2
00:00:04.280 --> 00:00:08.160
我们刚才聊了蛮久

3
00:00:08.160 --> 00:00:13.680
然后我们刚才尝试从WiseOshipper这场发布会开始谈起

4
00:00:13.680 --> 00:00:16.600
逐步的每一天解锁了哪些能力

5
00:00:16.600 --> 00:00:17.800
我们做了一个展开

6
00:00:17.800 --> 00:00:20.200
也做了一些观点上的锐评

7
00:00:20.200 --> 00:00:22.600
有些是正面的

8
00:00:22.600 --> 00:00:23.720
有些是负面的

9
00:00:23.720 --> 00:00:25.960
那我们也很正常

10
00:00:25.960 --> 00:00:28.560
这个产品推出来之后有不同的评价

11
00:00:28.680 --> 00:00:30.000
一次捋下来之后

12
00:00:30.000 --> 00:00:32.000
最后我们也做了一个展望

13
00:00:32.000 --> 00:00:35.040
这些技术本身不是新技术

14
00:00:35.040 --> 00:00:36.640
更多是平台的整合

15
00:00:36.640 --> 00:00:39.400
那么我们自然而然产生了一些疑虑

16
00:00:39.400 --> 00:00:41.080
也有对应的答案

17
00:00:41.080 --> 00:00:45.480
刚才小白菜和山越提供了很多有趣的观点

18
00:00:45.480 --> 00:00:50.560
刚才刘威小白菜和山越提供了很多有趣的观点

19
00:00:50.560 --> 00:00:55.840
我们听有听到这里也可以反复的去对这部分观点进行一个消化和吸收

20
00:00:55.840 --> 00:00:59.560
也欢迎在评论区互动谈谈你的看法

21
00:00:59.560 --> 00:01:00.840
行我是

22
00:01:00.840 --> 00:01:04.200
好我们开始吧

23
00:01:04.200 --> 00:01:04.880
嗨大家好

24
00:01:04.880 --> 00:01:06.640
新一期的WebWork播客又来了

25
00:01:06.640 --> 00:01:10.200
WebWork播客是几个前端程序员闲聊的音频播客节目

26
00:01:10.200 --> 00:01:12.360
节目将围绕程序员领域来闲聊

27
00:01:12.360 --> 00:01:14.360
聊职场聊资讯聊技术选型

28
00:01:14.360 --> 00:01:16.560
只要是和Web开发有关的都可以聊

29
00:01:16.560 --> 00:01:18.640
因为主播目前都是前端程序员

30
00:01:18.640 --> 00:01:20.880
所以会以前端微视角来切入

31
00:01:20.880 --> 00:01:23.040
微信粉丝群可以加out微信

32
00:01:23.040 --> 00:01:25.200
信心包包965新包965

33
00:01:25.200 --> 00:01:27.520
我是儿化音表牛逼的新保护

34
00:01:27.520 --> 00:01:30.880
我是声音词性的刘威Frank

35
00:01:30.880 --> 00:01:33.040
我是小白菜

36
00:01:33.040 --> 00:01:36.040
我是山月

37
00:01:36.040 --> 00:01:40.520
对这次我们邀请到了返场嘉宾山月

38
00:01:40.520 --> 00:01:44.720
邀请到山月我们想我们几个人一起来闲聊

39
00:01:44.720 --> 00:01:49.840
本期也是想围绕一些特定话题来闲聊

40
00:01:49.840 --> 00:01:53.440
这次我们最近应该确切都是本周

41
00:01:53.440 --> 00:01:56.360
从周一开始讲

42
00:01:56.360 --> 00:02:00.280
然后国外的Vessel搞了一个产品发布会

43
00:02:00.280 --> 00:02:07.440
每天公布一项它的最近的一些新功能进展

44
00:02:07.440 --> 00:02:10.840
然后最近从北京时间昨天晚上

45
00:02:10.840 --> 00:02:13.960
然后公开了最后一项第五

46
00:02:13.960 --> 00:02:17.000
然后我们趁着热乎想把这个

47
00:02:17.000 --> 00:02:18.960
感觉全网讨论Vessel Ship

48
00:02:18.960 --> 00:02:20.600
这个发布会的内容还比较少

49
00:02:20.600 --> 00:02:23.960
所以想邀请大家一块来进行一个睿评

50
00:02:23.960 --> 00:02:28.480
北京时间5月份

51
00:02:28.480 --> 00:02:34.560
对现在时间是北京时间5月6号晚上

52
00:02:34.560 --> 00:02:37.320
然后感觉还是蛮新鲜的

53
00:02:37.320 --> 00:02:40.000
先聊Vessel Ship

54
00:02:40.000 --> 00:02:44.080
但我印象中每年它会有发布会

55
00:02:44.080 --> 00:02:47.600
但不知道是不是每年固定的时间是不是定期举行

56
00:02:47.600 --> 00:02:48.600
这个你没了解吗

57
00:02:48.600 --> 00:02:51.600
没有 以前还没关注

58
00:02:51.600 --> 00:02:56.480
我感觉咱说不定这一期也是一个很好的开始

59
00:02:56.480 --> 00:02:59.360
说不定以后咱再有Wayle的

60
00:02:59.360 --> 00:03:00.280
再有NAS的

61
00:03:00.280 --> 00:03:02.200
再有什么Svart的一些大会

62
00:03:02.200 --> 00:03:05.600
说不定抗复大会也可以去看

63
00:03:05.600 --> 00:03:07.200
有没有有趣的话题进来讨论

64
00:03:07.200 --> 00:03:11.120
因为好多东西可能慢慢的会影响到

65
00:03:11.120 --> 00:03:15.200
咱的一些日常开发可能也会慢慢的受到一些影响

66
00:03:15.200 --> 00:03:18.200
行 然后刚才也提到了

67
00:03:18.200 --> 00:03:22.400
陆陆续续搞了5天 每天解锁几项内容

68
00:03:22.400 --> 00:03:24.800
然后我们总共是5项

69
00:03:24.800 --> 00:03:27.560
接下来我们逐一去过一下

70
00:03:27.560 --> 00:03:30.000
然后我先做基础的介绍

71
00:03:30.000 --> 00:03:31.520
然后各位再做一个补充

72
00:03:31.520 --> 00:03:34.320
因为好多观点 好多东西

73
00:03:34.320 --> 00:03:37.280
对有些听众来说可能比较新颖

74
00:03:37.280 --> 00:03:39.880
对有些老女儿来说可能不是新鲜玩意

75
00:03:39.880 --> 00:03:42.160
更多的是一些能力的整合

76
00:03:42.160 --> 00:03:44.400
我们就准备开始

77
00:03:44.400 --> 00:03:47.600
第一天 先说第一天的时候

78
00:03:47.600 --> 00:03:51.200
它其实在网页上给到了一个标题

79
00:03:51.200 --> 00:03:56.200
给这个标题的关键词是提到了Storage存储

80
00:03:56.200 --> 00:03:58.400
然后它官方去提就是

81
00:03:58.400 --> 00:04:00.800
它引入了四项新的功能

82
00:04:00.800 --> 00:04:04.000
分别是Winstall的KV和BLB

83
00:04:04.000 --> 00:04:07.000
还有POST,GRIs,Postgres

84
00:04:07.000 --> 00:04:10.400
还有EDGE,AgeConfigure

85
00:04:10.400 --> 00:04:12.400
提到了四项新的能力

86
00:04:12.400 --> 00:04:16.000
这四项新的能力对有的人来说可能比较新鲜

87
00:04:16.000 --> 00:04:17.600
然后咱整体一过

88
00:04:17.600 --> 00:04:19.400
那我还是继续说吧

89
00:04:19.400 --> 00:04:21.800
咱先一样一样说吧

90
00:04:21.800 --> 00:04:27.600
首先提到的或者说最容易理解的是Winstall KV

91
00:04:27.600 --> 00:04:31.600
它是一个K-value一个DB

92
00:04:31.600 --> 00:04:33.600
应该用到的也是Redis

93
00:04:33.600 --> 00:04:35.400
这个你没了解吗

94
00:04:35.400 --> 00:04:38.400
应该不是Redis

95
00:04:38.400 --> 00:04:41.400
应该是Redis吧,山越了解吗

96
00:04:41.400 --> 00:04:45.400
它文章上写的不是去Redis去做的吗

97
00:04:45.400 --> 00:04:46.400
嗯

98
00:04:46.400 --> 00:04:50.400
对,我理解这应该是整合了那个

99
00:04:50.400 --> 00:04:53.400
第三方提供的Redis的Serverless

100
00:04:53.400 --> 00:04:55.400
或者说第三方的Redis服务

101
00:04:55.400 --> 00:04:57.400
它给做了一个整合

102
00:04:57.400 --> 00:05:00.400
然后应该用起来会更容易一些

103
00:05:00.400 --> 00:05:02.400
嗯,对,它文章上就说

104
00:05:02.400 --> 00:05:05.400
它是一个Serverless的Redis的一个

105
00:05:05.400 --> 00:05:08.400
方案

106
00:05:08.400 --> 00:05:11.400
我看各位也有在尝试去跑那个项目

107
00:05:11.400 --> 00:05:14.400
这个要用起来大概要怎么用

108
00:05:14.400 --> 00:05:17.400
大概的思路是啥

109
00:05:17.400 --> 00:05:19.400
用起来

110
00:05:19.400 --> 00:05:21.400
我看代码中也是提到

111
00:05:21.400 --> 00:05:25.400
其实它相当于专门发布了一个NPM包

112
00:05:25.400 --> 00:05:30.400
名字叫@Winstall-kv

113
00:05:30.400 --> 00:05:34.400
其实我理解只要我们用到这个

114
00:05:34.400 --> 00:05:39.400
kv的场合在NAS.js中我们把这个包一安一隐

115
00:05:39.400 --> 00:05:42.400
那我们就立刻就可以使用这项服务

116
00:05:42.400 --> 00:05:46.400
对,它这个是VoSall的Storage

117
00:05:46.400 --> 00:05:49.400
你刚开始有可能需要在VoSall上面去

118
00:05:49.400 --> 00:05:51.400
新建一个Storage

119
00:05:51.400 --> 00:05:55.400
新建这么一个kv的一个存储

120
00:05:55.400 --> 00:05:56.400
然后它有一些配置

121
00:05:56.400 --> 00:05:59.400
然后在VoSall上面直接复制

122
00:05:59.400 --> 00:06:01.400
粘贴到你的项目上就可以

123
00:06:01.400 --> 00:06:05.400
然后它官方是提供一些事例的

124
00:06:05.400 --> 00:06:08.400
就是它在它的一些事例的仓库上

125
00:06:08.400 --> 00:06:11.400
提供一些kv数据库的一些事例

126
00:06:11.400 --> 00:06:14.400
然后可以直接去跑

127
00:06:14.400 --> 00:06:20.400
刘伟小白,能想到kv能对咱日常web开发有啥场景吗?

128
00:06:20.400 --> 00:06:23.400
哎呀,这场景

129
00:06:23.400 --> 00:06:26.400
场景其实挺多的吧

130
00:06:26.400 --> 00:06:31.400
但是你这主要是对serverless来说的

131
00:06:31.400 --> 00:06:33.400
你就是相当于

132
00:06:33.400 --> 00:06:37.400
这个主要就是想要把后端给干掉的意思

133
00:06:37.400 --> 00:06:41.400
kv就是一个很重要的一环嘛

134
00:06:41.400 --> 00:06:45.400
我正好今天我也在看

135
00:06:45.400 --> 00:06:48.400
就是偏前端的Storage的一些概念

136
00:06:48.400 --> 00:06:52.400
我今天看的是本地的那个circulate

137
00:06:52.400 --> 00:06:54.400
用WSM做circulate

138
00:06:54.400 --> 00:06:57.400
和OPFS

139
00:06:57.400 --> 00:07:03.400
就是浏览器的那个文件访问API

140
00:07:03.400 --> 00:07:07.400
不过跟现在我们说的这个

141
00:07:07.400 --> 00:07:10.400
其实没有太大的关系

142
00:07:10.400 --> 00:07:12.400
这个kv

143
00:07:12.400 --> 00:07:15.400
这个我觉得serverless

144
00:07:15.400 --> 00:07:17.400
之前是欠缺的一环吧

145
00:07:17.400 --> 00:07:20.400
现在相当于把它补上了

146
00:07:20.400 --> 00:07:24.400
对,我看也其实蛮多人也尝试

147
00:07:24.400 --> 00:07:26.400
比如在播客中

148
00:07:26.400 --> 00:07:27.400
我们立刻能想到的

149
00:07:27.400 --> 00:07:29.400
在播客中去点赞

150
00:07:29.400 --> 00:07:32.400
去做那个pv

151
00:07:32.400 --> 00:07:35.400
当前浏览量就可以先丢在那里

152
00:07:35.400 --> 00:07:38.400
它本质上还是一个内存数据库

153
00:07:38.400 --> 00:07:40.400
我们很容易把一些

154
00:07:40.400 --> 00:07:42.400
通过很简单的方式把一些数据

155
00:07:42.400 --> 00:07:43.400
存到那上面

156
00:07:43.400 --> 00:07:45.400
那我们再去读的时候

157
00:07:45.400 --> 00:07:48.400
再去读取的时候

158
00:07:48.400 --> 00:07:50.400
速度效率会比较高

159
00:07:50.400 --> 00:07:53.400
然后会相比于普通的这个db数据库

160
00:07:53.400 --> 00:07:55.400
关系数据库mongodb

161
00:07:55.400 --> 00:07:58.400
效率会更高更快

162
00:07:58.400 --> 00:08:00.400
对,所以这个

163
00:08:00.400 --> 00:08:03.400
上期之前跟ITAB作者聊的时候

164
00:08:03.400 --> 00:08:05.400
他不是自己实现了一个

165
00:08:05.400 --> 00:08:06.400
一开始不知道redis

166
00:08:06.400 --> 00:08:09.400
自己实现了一个类似的kv

167
00:08:09.400 --> 00:08:14.400
对,我们也能想到

168
00:08:14.400 --> 00:08:15.400
比如我们在做一些cms

169
00:08:15.400 --> 00:08:18.400
做一些网站或者说做一些

170
00:08:18.400 --> 00:08:20.400
拼团秒杀或者说电商类的时候

171
00:08:20.400 --> 00:08:23.400
某些数据需要实时的去

172
00:08:23.400 --> 00:08:24.400
去维护

173
00:08:24.400 --> 00:08:26.400
那我们就可以使用这个redis

174
00:08:26.400 --> 00:08:30.400
当然这相当于去尝试解释redis

175
00:08:30.400 --> 00:08:33.400
在咱哪些场景可以发挥作用

176
00:08:33.400 --> 00:08:35.400
或者说哪些场景下

177
00:08:35.400 --> 00:08:38.400
它能做得比传统的数据库

178
00:08:38.400 --> 00:08:41.400
关系和非关系数据库做得更好

179
00:08:41.400 --> 00:08:43.400
这部分感觉我们

180
00:08:43.400 --> 00:08:45.400
如果熟悉redis的话

181
00:08:45.400 --> 00:08:48.400
可以更容易的去get到它

182
00:08:48.400 --> 00:08:50.400
更多的它也是一个做一个整合吧

183
00:08:50.400 --> 00:08:51.400
然后我们去使用

184
00:08:51.400 --> 00:08:53.400
很容易去set和get

185
00:08:53.400 --> 00:08:54.400
然后也可以

186
00:08:54.400 --> 00:08:56.400
因为redis也支持各种

187
00:08:56.400 --> 00:09:00.400
除了字符串数字这些对象以外的

188
00:09:00.400 --> 00:09:03.400
其他格式也可以去使用

189
00:09:03.400 --> 00:09:04.400
OK

190
00:09:04.400 --> 00:09:07.400
后面他其实又提了第二项发布

191
00:09:07.400 --> 00:09:09.400
是vessel-blb

192
00:09:09.400 --> 00:09:10.400
这个了解吗

193
00:09:10.400 --> 00:09:13.400
删用给做个科普

194
00:09:13.400 --> 00:09:17.400
blb应该是取名字web-blb

195
00:09:17.400 --> 00:09:20.400
这API就是在前端上传文件的时候

196
00:09:20.400 --> 00:09:23.400
它上传上去就是一个blb

197
00:09:23.400 --> 00:09:28.400
然后它这其实是做了一个文件

198
00:09:28.400 --> 00:09:30.400
对象存储的一个服务

199
00:09:30.400 --> 00:09:31.400
对象存储服务的话

200
00:09:31.400 --> 00:09:34.400
如果我们以前用过阿里云的一些服务

201
00:09:34.400 --> 00:09:36.400
它其实就是和阿里云的那OSS

202
00:09:36.400 --> 00:09:38.400
它是一个东西

203
00:09:38.400 --> 00:09:41.400
但是它这个是基于

204
00:09:41.400 --> 00:09:47.400
cloudflare R2去做的一个对象存储服务

205
00:09:47.400 --> 00:09:49.400
然后我们可以就是在上面

206
00:09:49.400 --> 00:09:52.400
存储一些文件之类的一些东西

207
00:09:52.400 --> 00:09:57.400
它这个提供cloudflare

208
00:09:57.400 --> 00:10:02.400
就是图片裁剪那种的服务

209
00:10:02.400 --> 00:10:04.400
是同一个吗

210
00:10:04.400 --> 00:10:05.400
对应该是

211
00:10:05.400 --> 00:10:06.400
就是同一个

212
00:10:06.400 --> 00:10:08.400
就是它这OSS它除了

213
00:10:08.400 --> 00:10:11.400
就是可以在上面放一些资源

214
00:10:11.400 --> 00:10:13.400
就是一些前端的比如说

215
00:10:13.400 --> 00:10:15.400
JS,SS或者一些图片

216
00:10:15.400 --> 00:10:17.400
然后它还支持一些图片的一些处理

217
00:10:17.400 --> 00:10:19.400
比如模糊放大

218
00:10:19.400 --> 00:10:21.400
缩小裁剪

219
00:10:21.400 --> 00:10:24.400
然后压缩之类的一些事情

220
00:10:24.400 --> 00:10:28.400
这更多的

221
00:10:28.400 --> 00:10:30.400
对刚才山越提到咱和咱有关系

222
00:10:30.400 --> 00:10:32.400
可能是国内的通讯

223
00:10:32.400 --> 00:10:34.400
阿里云华为云这样类似的

224
00:10:34.400 --> 00:10:36.400
OSS存储桶

225
00:10:36.400 --> 00:10:40.400
我理解可能更多也是做了一个整合

226
00:10:40.400 --> 00:10:42.400
我们阅读它的官方文档

227
00:10:42.400 --> 00:10:44.400
给出的案例也是可以看到

228
00:10:44.400 --> 00:10:48.400
它也是专门抽象了一个NPM包

229
00:10:48.400 --> 00:10:51.400
那么可能在NASJS里去引这个包

230
00:10:51.400 --> 00:10:53.400
然后立刻就可以使用put

231
00:10:53.400 --> 00:10:55.400
然后就可以去上传了

232
00:10:55.400 --> 00:10:58.400
更多的去减少了我们去

233
00:10:58.400 --> 00:11:00.400
去阿里云去腾讯

234
00:11:00.400 --> 00:11:02.400
创建账号

235
00:11:02.400 --> 00:11:04.400
然后去创建存储桶

236
00:11:04.400 --> 00:11:07.400
再去创建对应的一些策略模式

237
00:11:07.400 --> 00:11:11.400
然后再去可能实施的去关注账单

238
00:11:11.400 --> 00:11:14.400
有了它可能在这一个YS平台上

239
00:11:14.400 --> 00:11:16.400
一站式的去迅速的去开通去管理

240
00:11:16.400 --> 00:11:18.400
和付对应的这个账单

241
00:11:18.400 --> 00:11:21.400
更多的是感觉是做了一个整合

242
00:11:21.400 --> 00:11:26.400
对

243
00:11:26.400 --> 00:11:27.400
感觉这部分也还好

244
00:11:27.400 --> 00:11:30.400
然后之前咱可能

245
00:11:30.400 --> 00:11:32.400
做一些上传文件的话可能也会接受到

246
00:11:32.400 --> 00:11:35.400
刚才提到的对象存储

247
00:11:35.400 --> 00:11:36.400
可能提S3

248
00:11:36.400 --> 00:11:38.400
或提腾讯阿里云存储桶的话

249
00:11:38.400 --> 00:11:41.400
更容易更接地气一点

250
00:11:41.400 --> 00:11:43.400
然后其实还有第三项

251
00:11:43.400 --> 00:11:46.400
第三项是Wes PosterGras

252
00:11:46.400 --> 00:11:47.400
这个是啥

253
00:11:47.400 --> 00:11:49.400
给介绍介绍

254
00:11:49.400 --> 00:11:52.400
PosterGras它其实是一款数据库

255
00:11:52.400 --> 00:11:54.400
应该是一款

256
00:11:54.400 --> 00:11:57.400
有可能比MySQL更强大的一个数据库

257
00:11:57.400 --> 00:12:00.400
因为它除了一些存储的功能

258
00:12:00.400 --> 00:12:02.400
它的分析功能也做得很好

259
00:12:02.400 --> 00:12:05.400
所以现在一些

260
00:12:05.400 --> 00:12:08.400
后端就是有可能更倾向

261
00:12:08.400 --> 00:12:10.400
倾向于用PosterGras去做一个数据库

262
00:12:10.400 --> 00:12:13.400
然后Wes是把PosterGras去集成

263
00:12:13.400 --> 00:12:15.400
在他们自己的一个服务

264
00:12:15.400 --> 00:12:18.400
然后并且像刚才的Blob和KV一样

265
00:12:18.400 --> 00:12:20.400
也做了一个SDK

266
00:12:20.400 --> 00:12:22.400
然后可以在

267
00:12:22.400 --> 00:12:25.400
在Nest.js里边发了一个NPM包

268
00:12:25.400 --> 00:12:28.400
可以在Nest.js里边直接去

269
00:12:28.400 --> 00:12:31.400
在前端直接写代码去

270
00:12:31.400 --> 00:12:34.400
查数据库这样子

271
00:12:34.400 --> 00:12:38.400
它这个其实也是基于和其他平台合作的

272
00:12:38.400 --> 00:12:45.400
去做的一个PosterGras一个云服务

273
00:12:45.400 --> 00:12:50.400
它是和NinEON这个组织去合作的

274
00:12:50.400 --> 00:12:58.400
对 这个其实文章提供的截图还蛮出圈的

275
00:12:58.400 --> 00:13:01.400
这个刘威应该能感受到这里边的梗

276
00:13:01.400 --> 00:13:08.400
刘威可以讲讲

277
00:13:08.400 --> 00:13:12.400
我说看这个截图的时候

278
00:13:12.400 --> 00:13:15.400
咱现在相当于在425端的时候可以

279
00:13:15.400 --> 00:13:16.400
看这个截图的时候

280
00:13:16.400 --> 00:13:21.400
在使用JS去编写服务端的时候

281
00:13:21.400 --> 00:13:23.400
咱就可以使用它提供的这个服务

282
00:13:23.400 --> 00:13:25.400
我们去执行写circle

283
00:13:25.400 --> 00:13:30.400
那就产生了一个怎么说梗图

284
00:13:30.400 --> 00:13:31.400
然后我们发现

285
00:13:31.400 --> 00:13:34.400
在写JS的时候这些代码似曾相识

286
00:13:34.400 --> 00:13:37.400
当我们很容易在代码中书写

287
00:13:37.400 --> 00:13:39.400
我们去接受一个请求的参数

288
00:13:39.400 --> 00:13:41.400
做一个接口或做一个方法

289
00:13:41.400 --> 00:13:48.400
那么用户前端传进来数据我们取到值之后

290
00:13:48.400 --> 00:13:51.400
去拼装这个circle语句

291
00:13:51.400 --> 00:13:54.400
insert谁谁谁from谁谁value是谁谁

292
00:13:54.400 --> 00:13:57.400
ADC去做了一个结构

293
00:13:57.400 --> 00:14:01.400
这个其实这段是在

294
00:14:01.400 --> 00:14:04.400
就是以前PAP的时候

295
00:14:04.400 --> 00:14:06.400
它是在index.pap里边

296
00:14:06.400 --> 00:14:08.400
然后直接去做一些数据库查询

297
00:14:08.400 --> 00:14:10.400
一些redis查询一些操作

298
00:14:10.400 --> 00:14:12.400
就是经常是一些服务器端的操作

299
00:14:12.400 --> 00:14:14.400
比如这个circle

300
00:14:14.400 --> 00:14:16.400
就是insert into什么之类的

301
00:14:16.400 --> 00:14:18.400
就是PAP老爱干这些事情

302
00:14:18.400 --> 00:14:21.400
然后现在他们就把这个

303
00:14:21.400 --> 00:14:24.400
那点JS的图标直接换成PAP的一个图标

304
00:14:24.400 --> 00:14:28.400
然后说PAP果然是世界上最好的语言

305
00:14:28.400 --> 00:14:29.400
对

306
00:14:29.400 --> 00:14:34.400
你说这点在一些老远看来可能就是会会心一笑

307
00:14:34.400 --> 00:14:36.400
然后这也很明显

308
00:14:36.400 --> 00:14:38.400
我们立刻能意识到这样写的话

309
00:14:38.400 --> 00:14:39.400
以前是这样做的

310
00:14:39.400 --> 00:14:43.400
那也会产生更多的一些那个隐患安全问题

311
00:14:43.400 --> 00:14:45.400
但想必估计也会预料到

312
00:14:45.400 --> 00:14:50.400
这个可以到时候在收弄图放一个截图

313
00:14:50.400 --> 00:14:52.400
就是现在我们刚才提到

314
00:14:52.400 --> 00:14:54.400
使用这个参数拼装

315
00:14:54.400 --> 00:14:55.400
就能得到这个数据

316
00:14:55.400 --> 00:14:57.400
我们真的去在服务端

317
00:14:57.400 --> 00:15:00.400
去拼装了这个circle语句去做执行

318
00:15:00.400 --> 00:15:01.400
还好

319
00:15:01.400 --> 00:15:03.400
这个其实以前就有了嘛

320
00:15:03.400 --> 00:15:06.400
谷歌的FairBase对吧

321
00:15:06.400 --> 00:15:08.400
就已经是这种风格了

322
00:15:08.400 --> 00:15:10.400
就被人诟病了好久

323
00:15:10.400 --> 00:15:15.400
你直接在就是像前段代码里边去写circle语句查询

324
00:15:15.400 --> 00:15:18.400
这个就很奇怪

325
00:15:18.400 --> 00:15:19.400
对

326
00:15:19.400 --> 00:15:21.400
然后其实在类似于Circleless

327
00:15:21.400 --> 00:15:23.400
比如提供芒果数据库的时候

328
00:15:23.400 --> 00:15:25.400
也会遇到类似的

329
00:15:25.400 --> 00:15:27.400
直接在服务端或者是在前端

330
00:15:27.400 --> 00:15:29.400
去直接去执行对应的执行

331
00:15:29.400 --> 00:15:31.400
数据库操作

332
00:15:31.400 --> 00:15:33.400
DB去slide去insert去update

333
00:15:33.400 --> 00:15:36.400
然后这部分一般会额外去提到

334
00:15:36.400 --> 00:15:38.400
配合那个安全策略

335
00:15:38.400 --> 00:15:39.400
对安全策略

336
00:15:39.400 --> 00:15:44.400
去和当前的用户的一些权限挂钩

337
00:15:44.400 --> 00:15:48.400
能避免用户做出一些比较危险的操作

338
00:15:48.400 --> 00:15:50.400
这个实际的话

339
00:15:50.400 --> 00:15:53.400
可能会有更深的一个体会

340
00:15:53.400 --> 00:15:54.400
OK

341
00:15:54.400 --> 00:15:56.400
然后第一天还有一项

342
00:15:56.400 --> 00:15:58.400
其实叫age config

343
00:15:58.400 --> 00:16:01.400
这个还是山悦帮忙给作为介绍

344
00:16:01.400 --> 00:16:07.400
我们写一些server或者前段的时候

345
00:16:07.400 --> 00:16:10.400
它有很多像配置

346
00:16:10.400 --> 00:16:12.400
就是配置服务

347
00:16:12.400 --> 00:16:14.400
这样子我们在启动项目的时候

348
00:16:14.400 --> 00:16:15.400
基本上都会执行一个脚本

349
00:16:15.400 --> 00:16:16.400
去我们的配置服务

350
00:16:16.400 --> 00:16:18.400
拉下一些配置

351
00:16:18.400 --> 00:16:21.400
然后其实就是一个对象或者一个json

352
00:16:21.400 --> 00:16:23.400
然后在启动项目之前

353
00:16:23.400 --> 00:16:26.400
把它拉下来然后去开跑

354
00:16:26.400 --> 00:16:28.400
前端的配置比较简单

355
00:16:28.400 --> 00:16:29.400
但是后端的配置

356
00:16:29.400 --> 00:16:31.400
它有可能有几十项

357
00:16:31.400 --> 00:16:32.400
或者100来项

358
00:16:32.400 --> 00:16:34.400
200来项就比较麻烦

359
00:16:34.400 --> 00:16:37.400
所以它这个时候就有一些专门的配置中心

360
00:16:37.400 --> 00:16:40.400
像我们以前就会用一些console

361
00:16:40.400 --> 00:16:43.400
或者是k8s config去做这个事情

362
00:16:43.400 --> 00:16:47.400
然后现在wassol也加了这么一项功能

363
00:16:49.400 --> 00:16:53.400
这跟环境变量有关系吗

364
00:16:53.400 --> 00:17:00.400
它环境变量可以理解为也有关系吧

365
00:17:00.400 --> 00:17:01.400
它这样子

366
00:17:01.400 --> 00:17:04.400
因为你环境变量它限制比较死

367
00:17:04.400 --> 00:17:06.400
因为它只能是一个字符串

368
00:17:06.400 --> 00:17:10.400
而且你要是环境变量会非常多

369
00:17:10.400 --> 00:17:13.400
所以它就有了配置服务

370
00:17:13.400 --> 00:17:17.400
而且我们一般就是把这些配置

371
00:17:17.400 --> 00:17:19.400
我们可以分成两类

372
00:17:19.400 --> 00:17:23.400
一类可以理解为是config

373
00:17:23.400 --> 00:17:25.400
一类是secret

374
00:17:25.400 --> 00:17:27.400
secret就是比较敏感的那些数据

375
00:17:27.400 --> 00:17:28.400
比如说服务

376
00:17:28.400 --> 00:17:31.400
比如说数据库密码那些

377
00:17:31.400 --> 00:17:32.400
然后不敏感的那些数据

378
00:17:32.400 --> 00:17:35.400
比如说你的一些配置

379
00:17:35.400 --> 00:17:38.400
比如说你的应用的一些配置这样子

380
00:17:38.400 --> 00:17:41.400
对但是它这些config

381
00:17:41.400 --> 00:17:45.400
它其实是也是有很多个写法的

382
00:17:45.400 --> 00:17:47.400
一般就是直接写文件就可以了

383
00:17:47.400 --> 00:17:50.400
然后我们其实有一些SDK

384
00:17:50.400 --> 00:17:53.400
可以就直接把它写到数据库

385
00:17:53.400 --> 00:17:54.400
写到环境变量里边

386
00:17:54.400 --> 00:17:56.400
然后我们也可以去读环境变量

387
00:17:56.400 --> 00:18:00.400
如果是渣瓦老鸟的话

388
00:18:00.400 --> 00:18:04.400
提到NUCOS可能会更一下子能够get到

389
00:18:04.400 --> 00:18:06.400
这个配置中心的这个作用

390
00:18:06.400 --> 00:18:08.400
然后我现在理解

391
00:18:08.400 --> 00:18:11.400
就是我们它额外提一个A值

392
00:18:11.400 --> 00:18:14.400
更多的是在咱现在这个变异计算

393
00:18:14.400 --> 00:18:17.400
A值compose去在大行其道的情况下

394
00:18:17.400 --> 00:18:20.400
因为很多运算的过程

395
00:18:20.400 --> 00:18:22.400
并不是在中心化的这个服务器上

396
00:18:22.400 --> 00:18:25.400
所以现在就是执行

397
00:18:25.400 --> 00:18:26.400
去执行某些操作的时候

398
00:18:26.400 --> 00:18:27.400
可能是在变异服务器上

399
00:18:27.400 --> 00:18:29.400
就是在不同的服务器上

400
00:18:29.400 --> 00:18:31.400
它是分部是去执行

401
00:18:31.400 --> 00:18:33.400
那我们有了这个服务

402
00:18:33.400 --> 00:18:36.400
它能够更快的去拉进不同服务去

403
00:18:36.400 --> 00:18:37.400
读这个配置中心

404
00:18:37.400 --> 00:18:39.400
去读这些配置的这个过程

405
00:18:39.400 --> 00:18:42.400
一方面可能更就是操作效率更高了

406
00:18:42.400 --> 00:18:44.400
另一方面就是存储的时候

407
00:18:44.400 --> 00:18:47.400
读取的时候那个分割是一致的

408
00:18:47.400 --> 00:18:49.400
就是都能通过这个包装

409
00:18:49.400 --> 00:18:54.400
很容易的得到这个对应的这个配置

410
00:18:54.400 --> 00:18:56.400
然后得到里边具体的这个值

411
00:18:56.400 --> 00:19:01.400
这个额外其实可以展开去谈那个变异计算

412
00:19:01.400 --> 00:19:02.400
这个就不展开了

413
00:19:02.400 --> 00:19:05.400
配置中心不是个新东西

414
00:19:05.400 --> 00:19:08.400
然后它包装了一层去

415
00:19:08.400 --> 00:19:10.400
更容易的去使用这个

416
00:19:10.400 --> 00:19:12.400
变异计算的配置能力

417
00:19:12.400 --> 00:19:16.400
相当于做了一步整合

418
00:19:16.400 --> 00:19:18.400
OK这相当于第一天

419
00:19:18.400 --> 00:19:22.400
第一天其实有刚才主题是Storage

420
00:19:22.400 --> 00:19:24.400
和咱存储和数据库有关系

421
00:19:24.400 --> 00:19:28.400
然后刚才提到了KV提到了BLB

422
00:19:28.400 --> 00:19:29.400
Bomb是吧

423
00:19:29.400 --> 00:19:31.400
然后提到了Posgress

424
00:19:31.400 --> 00:19:34.400
然后提到了Configure

425
00:19:34.400 --> 00:19:35.400
然后这是第一天内容

426
00:19:35.400 --> 00:19:36.400
我们来进入第二天

427
00:19:36.400 --> 00:19:39.400
第二天也其实也提到了蛮多的内容

428
00:19:39.400 --> 00:19:42.400
然后第二天的主题叫安全

429
00:19:42.400 --> 00:19:46.400
然后在提到第二天发布的内容的时候

430
00:19:46.400 --> 00:19:48.400
额外提到了两项

431
00:19:48.400 --> 00:19:51.400
一个是安全计算

432
00:19:51.400 --> 00:19:53.400
一个是防火墙

433
00:19:53.400 --> 00:19:55.400
先提安全计算

434
00:19:55.400 --> 00:19:57.400
这个山越有理解吗

435
00:19:57.400 --> 00:20:01.400
怎么称之为安全计算

436
00:20:01.400 --> 00:20:02.400
全计算

437
00:20:02.400 --> 00:20:04.400
看它里面写的文档

438
00:20:04.400 --> 00:20:08.400
一般就是一些IP的限制之类

439
00:20:08.400 --> 00:20:13.400
就是IP白名单、黑名单这些

440
00:20:13.400 --> 00:20:19.400
就是一些就是访问策略吧相当于

441
00:20:19.400 --> 00:20:22.400
比如说允许哪些IP访问之类

442
00:20:22.400 --> 00:20:28.400
这个也是看它阅读它文档

443
00:20:28.400 --> 00:20:30.400
它也尝试去提到了

444
00:20:30.400 --> 00:20:33.400
有些网络我们可能需要去限制它访问

445
00:20:33.400 --> 00:20:37.400
那我们更容易接地气一点就是通过VPA

446
00:20:37.400 --> 00:20:40.400
通过特定的方式

447
00:20:40.400 --> 00:20:42.400
才能去访问特定的网络

448
00:20:42.400 --> 00:20:47.400
那我们很多小伙伴可以回想起当初疫情刚开始的时候

449
00:20:47.400 --> 00:20:50.400
好多朋友在没有提前预案的方式下

450
00:20:50.400 --> 00:20:53.400
可能访问公司的网络是比较费劲的

451
00:20:53.400 --> 00:20:58.400
需要挂一些特殊的代理才能去访问咱私域的环境

452
00:20:58.400 --> 00:21:02.400
Vessel也相当于去给提供了这项服务

453
00:21:02.400 --> 00:21:05.400
我们在Vessel上去使用的这些功能

454
00:21:05.400 --> 00:21:08.400
可以通过它提供的这项服务

455
00:21:08.400 --> 00:21:12.400
实现IP访问限制黑名单或白名单

456
00:21:12.400 --> 00:21:17.400
然后也可以使用通过咱类似于VP类似这种相应的技术

457
00:21:17.400 --> 00:21:23.400
来实现访问的一些和其他数据的一些隔离

458
00:21:23.400 --> 00:21:26.400
这个感觉讲的比较粗略

459
00:21:26.400 --> 00:21:29.400
应该能够get到相应的这个点

460
00:21:29.400 --> 00:21:35.400
你说VP人家一开始想的是啥呀

461
00:21:35.400 --> 00:21:38.400
我不知道,应该是公司内容吧

462
00:21:38.400 --> 00:21:45.400
本来也是限制某些人不能访问某些网站,某些内容

463
00:21:45.400 --> 00:21:49.400
使用了这个,咱不提了,闭嘴了

464
00:21:49.400 --> 00:21:53.400
后面还提到一个防火墙,Firewall,这个可以做啥

465
00:21:53.400 --> 00:21:59.400
防止DDoS攻击之类

466
00:21:59.400 --> 00:22:01.400
对,然后

467
00:22:01.400 --> 00:22:03.400
它这个怎么防DDoS

468
00:22:03.400 --> 00:22:05.400
进调吗

469
00:22:05.400 --> 00:22:08.400
安全策略

470
00:22:08.400 --> 00:22:13.400
我之前好像DDoS这个东西

471
00:22:13.400 --> 00:22:17.400
它都是直接用高防那种

472
00:22:17.400 --> 00:22:22.400
阻止通过网站去DDoS

473
00:22:22.400 --> 00:22:30.400
不是说直接D你的那个你部署的近代服务吗

474
00:22:30.400 --> 00:22:33.400
是,DDoS就是这样的

475
00:22:33.400 --> 00:22:39.400
通过肉机的方式大规模的人去访问你这个服务

476
00:22:39.400 --> 00:22:41.400
访问一半不管了

477
00:22:41.400 --> 00:22:44.400
其实我们如果啥也不做的话

478
00:22:44.400 --> 00:22:47.400
会影响咱的服务的稳定性

479
00:22:47.400 --> 00:22:49.400
大量的接口进来

480
00:22:49.400 --> 00:22:52.400
我们同时涌入大量的请求

481
00:22:52.400 --> 00:22:54.400
甚至说对CDE来说

482
00:22:54.400 --> 00:22:59.400
同时访问大量图片会刷掉咱大量的资源

483
00:22:59.400 --> 00:23:03.400
会产生一些咱高额的账单

484
00:23:03.400 --> 00:23:05.400
有了这个高防,有这个防火墙

485
00:23:05.400 --> 00:23:08.400
咱可以设定对应的策略

486
00:23:08.400 --> 00:23:10.400
如果我们很容易的

487
00:23:10.400 --> 00:23:13.400
如果认为某个用户短时间内

488
00:23:13.400 --> 00:23:15.400
比如一秒内访问了咱20次50次

489
00:23:15.400 --> 00:23:18.400
我们就认为这个访问可能是非法的

490
00:23:18.400 --> 00:23:21.400
有了这样的一些安全防火墙

491
00:23:21.400 --> 00:23:22.400
安全策略

492
00:23:22.400 --> 00:23:28.400
咱能够最起码缓解一部分攻击的压力

493
00:23:28.400 --> 00:23:30.400
很多IP进来

494
00:23:30.400 --> 00:23:33.400
发现这个安全是有问题的

495
00:23:33.400 --> 00:23:35.400
我们就可以把它通过短时间禁运

496
00:23:35.400 --> 00:23:39.400
或长期拉黑的方式来阻止它

497
00:23:39.400 --> 00:23:42.400
这个提到DDoS

498
00:23:42.400 --> 00:23:45.400
感觉咱之前受到攻击的话

499
00:23:45.400 --> 00:23:46.400
一般会想到Clerk's Fare

500
00:23:46.400 --> 00:23:49.400
然后好多网站其实是使用它来做

501
00:23:49.400 --> 00:23:52.400
做简单的DDoS防护

502
00:23:52.400 --> 00:23:54.400
高防

503
00:23:54.400 --> 00:23:55.400
高防

504
00:23:55.400 --> 00:23:57.400
感觉Wesel去整合了这部分能力

505
00:23:57.400 --> 00:23:59.400
可能是更容易用了

506
00:23:59.400 --> 00:24:01.400
或者说这部分规则更完善

507
00:24:01.400 --> 00:24:07.400
然后提供的这个额度和资源可能会更多

508
00:24:07.400 --> 00:24:12.400
毕竟也是咱提到前端手续一纸的大企业

509
00:24:12.400 --> 00:24:17.400
后面其实还额外提到了一些其他的

510
00:24:17.400 --> 00:24:22.400
然后没有放在官方最外层的大标题里

511
00:24:22.400 --> 00:24:25.400
它也整合了一些健全操作

512
00:24:25.400 --> 00:24:30.400
比如Auth.js和其他的一些类似的

513
00:24:30.400 --> 00:24:34.400
做用户身份健全的

514
00:24:34.400 --> 00:24:37.400
我们也能想到我们提供一个网站

515
00:24:37.400 --> 00:24:41.400
希望GitHub提供谷歌接入

516
00:24:41.400 --> 00:24:46.400
或者提供类似的这种符合Auth2

517
00:24:46.400 --> 00:24:49.400
AuthOS的这些协议的这种登录网站

518
00:24:49.400 --> 00:24:51.400
我们有额外的服务

519
00:24:51.400 --> 00:24:53.400
它现在做了一个整合

520
00:24:53.400 --> 00:24:56.400
后续它提到安全性也会提到一些日制

521
00:24:56.400 --> 00:25:02.400
现在增强了一个网站的服务监控盒日制

522
00:25:02.400 --> 00:25:05.400
想必可以通过这个服务我们去看

523
00:25:05.400 --> 00:25:08.400
我们能够观察到直观的观察到咱的

524
00:25:08.400 --> 00:25:11.400
脱管的网站或脱管的服务

525
00:25:11.400 --> 00:25:16.400
过去这些承载的压力或说对应的一些流量状况

526
00:25:16.400 --> 00:25:18.400
能够更直观的去找到它

527
00:25:18.400 --> 00:25:20.400
监控还好

528
00:25:20.400 --> 00:25:24.400
健全里边有没有Airbag

529
00:25:24.400 --> 00:25:27.400
这个是啥什么东西

530
00:25:27.400 --> 00:25:29.400
那个身份不是

531
00:25:29.400 --> 00:25:32.400
角色控制

532
00:25:32.400 --> 00:25:34.400
角色

533
00:25:34.400 --> 00:25:35.400
没有

534
00:25:35.400 --> 00:25:37.400
RBAC

535
00:25:37.400 --> 00:25:39.400
RBAC

536
00:25:39.400 --> 00:25:42.400
这个我感觉它应该会有

537
00:25:42.400 --> 00:25:44.400
验证是第一步

538
00:25:44.400 --> 00:25:46.400
我们谷歌登录

539
00:25:46.400 --> 00:25:49.400
可以使用Auth.js来做

540
00:25:49.400 --> 00:25:53.400
但我只是从我之前使用Authen

541
00:25:53.400 --> 00:25:59.400
就是咱国内专门做健全的使用情况来推测

542
00:25:59.400 --> 00:26:02.400
可能更多的是做整合

543
00:26:02.400 --> 00:26:05.400
单独咱去做提供它提供的服务的时候

544
00:26:05.400 --> 00:26:07.400
就跟刚才提到的Redis KBE一样

545
00:26:07.400 --> 00:26:09.400
我们可以使用自己的

546
00:26:09.400 --> 00:26:14.400
去逐步的去对应的网站上创建账号

547
00:26:14.400 --> 00:26:16.400
去引入SDK去做配置

548
00:26:16.400 --> 00:26:18.400
然后去专门的去负责

549
00:26:18.400 --> 00:26:20.400
在它的网站上去付这个账单

550
00:26:20.400 --> 00:26:23.400
有了Wi-Fi的这个脱管

551
00:26:23.400 --> 00:26:25.400
可能我们去付账单的时候

552
00:26:25.400 --> 00:26:27.400
只需要在Wi-Fi上去付就可以了

553
00:26:27.400 --> 00:26:30.400
更容易去控制和整合

554
00:26:30.400 --> 00:26:32.400
这部分理解的

555
00:26:32.400 --> 00:26:33.400
它介绍的不多

556
00:26:33.400 --> 00:26:36.400
然后我们也是只能在官方提到的

557
00:26:36.400 --> 00:26:39.400
这个博客中指言片中去推测

558
00:26:39.400 --> 00:26:41.400
这样的整合能力具体是啥

559
00:26:41.400 --> 00:26:43.400
然后不一定完全准确

560
00:26:43.400 --> 00:26:45.400
行这是第二天内容

561
00:26:45.400 --> 00:26:46.400
我们继续走

562
00:26:46.400 --> 00:26:49.400
第三天也提到了蛮多

563
00:26:49.400 --> 00:26:51.400
然后提到了几项能力

564
00:26:51.400 --> 00:26:55.400
首先是提到了Wi-Raw

565
00:26:55.400 --> 00:26:57.400
刘维你帮我念吧

566
00:26:57.400 --> 00:26:58.400
啥

567
00:26:58.400 --> 00:27:00.400
第三天都有啥更新

568
00:27:00.400 --> 00:27:11.400
第三天有Wi-Raw editing

569
00:27:11.400 --> 00:27:16.400
视觉化的编辑和Wi-Saw space

570
00:27:16.400 --> 00:27:19.400
然后可能是大规模去管代码的

571
00:27:19.400 --> 00:27:22.400
这部分还是请山悦做个介绍了

572
00:27:22.400 --> 00:27:25.400
你理解这两项功能是做啥用的

573
00:27:25.400 --> 00:27:30.400
第一项CMS的随点

574
00:27:30.400 --> 00:27:35.400
随发布它是一个所见即所得的系统

575
00:27:35.400 --> 00:27:37.400
我们是开发人员

576
00:27:37.400 --> 00:27:42.400
我们去改数据应该是会比较简单一些

577
00:27:42.400 --> 00:27:44.400
但是对一些非开发人员

578
00:27:44.400 --> 00:27:46.400
比如说一些营销人员

579
00:27:46.400 --> 00:27:47.400
但他也想改数据

580
00:27:47.400 --> 00:27:49.400
想看一看这个效果

581
00:27:49.400 --> 00:27:51.400
然后通过这个功能

582
00:27:51.400 --> 00:27:55.400
他就可以很容易的去点击

583
00:27:55.400 --> 00:27:58.400
去编辑然后并且把它保存

584
00:27:58.400 --> 00:28:00.400
这样子

585
00:28:00.400 --> 00:28:06.400
对他这其实也是和一个CMS的服务商去合作的

586
00:28:06.400 --> 00:28:14.400
这部分刚才咱也好奇

587
00:28:14.400 --> 00:28:17.400
就刚才我们一些去阅读了这部分的内容和视频

588
00:28:17.400 --> 00:28:23.400
发现了他其实想倡导提出一项标准来

589
00:28:23.400 --> 00:28:26.400
他称之为内容源应设

590
00:28:26.400 --> 00:28:28.400
希望做到的是

591
00:28:28.400 --> 00:28:32.400
他现在适配了一个具体的CMS厂商

592
00:28:32.400 --> 00:28:37.400
如果我们通过引入这个协议

593
00:28:37.400 --> 00:28:42.400
我们能够在页面中去很轻松的去修改某一篇

594
00:28:42.400 --> 00:28:44.400
比如某篇新闻某篇博客的标题

595
00:28:44.400 --> 00:28:47.400
某篇博客的文章的具体内容

596
00:28:47.400 --> 00:28:50.400
也很容易去替换某一张比如说封面图

597
00:28:50.400 --> 00:28:52.400
或替换某一个图片

598
00:28:52.400 --> 00:28:54.400
这样以往的话

599
00:28:54.400 --> 00:28:58.400
这部分内容维护需要打开专门的管理后台

600
00:28:58.400 --> 00:29:00.400
找到这篇文章去点编辑

601
00:29:00.400 --> 00:29:03.400
然后在那个封面编辑器里去修改对面的内容

602
00:29:03.400 --> 00:29:04.400
再去点更新

603
00:29:04.400 --> 00:29:07.400
有了现在这个接入的方案之后

604
00:29:07.400 --> 00:29:12.400
我们可以直接在页面中去进行点编辑

605
00:29:12.400 --> 00:29:17.400
直接在页面中就完成了修改和更新的操作

606
00:29:17.400 --> 00:29:21.400
还能改图片吗

607
00:29:21.400 --> 00:29:26.400
对 我看也提到了图片的上传和替换

608
00:29:26.400 --> 00:29:29.400
是有 还有那个视力

609
00:29:29.400 --> 00:29:35.400
对 现代的CMS更多的倾向于去做以notion为主吧

610
00:29:35.400 --> 00:29:38.400
可能更多的去提供了这种BLB

611
00:29:38.400 --> 00:29:41.400
每一行每一段其实都是一个块

612
00:29:41.400 --> 00:29:44.400
我们去替换这一部分的时候就会

613
00:29:44.400 --> 00:29:54.400
刚才Shan也提到可能对内容维护者来说

614
00:29:54.400 --> 00:29:56.400
对于博客网站来说

615
00:29:56.400 --> 00:29:58.400
对于电商平台来说可能更容易

616
00:29:58.400 --> 00:30:02.400
但是我刚才看到了这个还不是shop法

617
00:30:02.400 --> 00:30:07.400
还不是在电商最有名的CMS

618
00:30:07.400 --> 00:30:12.400
后续的话我相信也会有更多的这种CMS接入进来

619
00:30:12.400 --> 00:30:14.400
方便我们去做修改

620
00:30:14.400 --> 00:30:19.400
其实顺着那个文章我们发现

621
00:30:19.400 --> 00:30:23.400
它实现这个更新会提到一些比较

622
00:30:23.400 --> 00:30:27.400
前端发明了比较多的概念

623
00:30:27.400 --> 00:30:29.400
比如说CSP

624
00:30:29.400 --> 00:30:31.400
CSR客户端渲染

625
00:30:31.400 --> 00:30:33.400
然后进化成SSR服务端渲染

626
00:30:33.400 --> 00:30:35.400
对于一些博客程序来说

627
00:30:35.400 --> 00:30:37.400
可能使用SSG

628
00:30:37.400 --> 00:30:42.400
服务端去生成这个对应的页面

629
00:30:42.400 --> 00:30:44.400
我们在以往的时候

630
00:30:44.400 --> 00:30:46.400
比如咱使用withpress的时候

631
00:30:46.400 --> 00:30:49.400
我们去改了一篇文章的某个字的时候

632
00:30:49.400 --> 00:30:51.400
我们使用SSG的话

633
00:30:51.400 --> 00:30:53.400
需要整体的去做一个更新

634
00:30:53.400 --> 00:30:55.400
可能会引入一些缓存的概念

635
00:30:55.400 --> 00:30:58.400
但本质上还是需要每一篇去重新做渲染

636
00:30:58.400 --> 00:31:02.400
我们又额外引入了最近比较新的ISR

637
00:31:02.400 --> 00:31:04.400
增量的静态渲染

638
00:31:04.400 --> 00:31:07.400
我们实现了刚才提到的随点随发布

639
00:31:07.400 --> 00:31:10.400
我们修改了这篇文章之后

640
00:31:10.400 --> 00:31:14.400
立刻就更新了指定的路由

641
00:31:14.400 --> 00:31:15.400
指定的UIL

642
00:31:15.400 --> 00:31:18.400
里边的内容现在也是静态的

643
00:31:18.400 --> 00:31:21.400
也是能够实现了SSG

644
00:31:21.400 --> 00:31:24.400
拿到了SSG的效果

645
00:31:24.400 --> 00:31:27.400
相当于额外去做一个展开

646
00:31:27.400 --> 00:31:31.400
除了视觉编辑之外

647
00:31:31.400 --> 00:31:33.400
还有一个space

648
00:31:33.400 --> 00:31:38.400
各位怎么看这个产品

649
00:31:38.400 --> 00:31:42.400
还不如把一开始的讨论直接放出来

650
00:31:42.400 --> 00:31:43.400
对

651
00:31:43.400 --> 00:31:46.400
那个时候聊得更有激情一点

652
00:31:46.400 --> 00:31:49.400
对 这部分后面可以剪辑了

653
00:31:49.400 --> 00:31:50.400
这部分咱就跳过吧

654
00:31:50.400 --> 00:31:53.400
刚才咱聊的也蛮深入

655
00:31:53.400 --> 00:31:54.400
OK吧

656
00:31:54.400 --> 00:31:57.400
这因为咱刚才讨论也不应对

657
00:31:57.400 --> 00:31:59.400
OK 咱进入第四天

658
00:31:59.400 --> 00:32:01.400
第四天也是有一个主题

659
00:32:01.400 --> 00:32:04.400
是Dynamic

660
00:32:04.400 --> 00:32:05.400
OK

661
00:32:05.400 --> 00:32:06.400
然后这一天

662
00:32:06.400 --> 00:32:08.400
第四天主要还是讲了

663
00:32:08.400 --> 00:32:12.400
Vessel的核心产品

664
00:32:12.400 --> 00:32:13.400
NASJS

665
00:32:13.400 --> 00:32:15.400
节目剪辑到这里补充一句

666
00:32:15.400 --> 00:32:17.400
截止目前这款产品

667
00:32:17.400 --> 00:32:19.400
还是企业内测还没有公测

668
00:32:19.400 --> 00:32:21.400
因此我们从文章的支援片语

669
00:32:21.400 --> 00:32:24.400
猜想了一些结论供各位参考

670
00:32:24.400 --> 00:32:27.400
下面我看一下

671
00:32:27.400 --> 00:32:29.400
下面有不同的域名

672
00:32:29.400 --> 00:32:31.400
肯定是对应不同的项目

673
00:32:31.400 --> 00:32:34.400
对 它这个有可能不是Monorepo

674
00:32:34.400 --> 00:32:36.400
这个就是真的Monorepo的吗

675
00:32:36.400 --> 00:32:37.400
对 是真的Monorepo

676
00:32:37.400 --> 00:32:39.400
它这个有可能就是

677
00:32:39.400 --> 00:32:41.400
真的是有很多个repo

678
00:32:41.400 --> 00:32:42.400
同一个repo

679
00:32:42.400 --> 00:32:44.400
然后同一个项目

680
00:32:44.400 --> 00:32:45.400
同一个大项目

681
00:32:45.400 --> 00:32:46.400
在聚合

682
00:32:46.400 --> 00:32:47.400
对 就好像

683
00:32:47.400 --> 00:32:48.400
比如说你们前端

684
00:32:48.400 --> 00:32:49.400
以前只有一个前端

685
00:32:49.400 --> 00:32:51.400
然后后来说发现要做H5

686
00:32:51.400 --> 00:32:53.400
又一个做H5的

687
00:32:53.400 --> 00:32:54.400
然后又要做小程序

688
00:32:54.400 --> 00:32:56.400
又去做一个小程序的

689
00:32:56.400 --> 00:32:58.400
然后发现有的客户要定制

690
00:32:58.400 --> 00:33:00.400
然后又分出去了一个项目

691
00:33:00.400 --> 00:33:01.400
然后后来项目越来越多

692
00:33:01.400 --> 00:33:02.400
变成了几十个

693
00:33:02.400 --> 00:33:07.400
对 所以它有可能真的是

694
00:33:07.400 --> 00:33:08.400
有很多个repo

695
00:33:08.400 --> 00:33:10.400
但都是这一个项目组的

696
00:33:10.400 --> 00:33:12.400
或者都是由这个主项目分出去的这种

697
00:33:12.400 --> 00:33:15.400
这就放到一个space里

698
00:33:15.400 --> 00:33:18.400
你别 是吗

699
00:33:18.400 --> 00:33:23.400
想到很多拆分的细节

700
00:33:23.400 --> 00:33:25.400
这不就是加了个组织吗

701
00:33:25.400 --> 00:33:28.400
加了个group子的

702
00:33:28.400 --> 00:33:31.400
对 我觉得就是一个group的概念

703
00:33:31.400 --> 00:33:33.400
感觉没这么简单

704
00:33:33.400 --> 00:33:34.400
要这么简单

705
00:33:34.400 --> 00:33:36.400
他好意思在这单独拿出来说

706
00:33:36.400 --> 00:33:39.400
好吧 我对这个

707
00:33:39.400 --> 00:33:41.400
我感觉有可能真的是

708
00:33:41.400 --> 00:33:43.400
只加了一个group的概念

709
00:33:43.400 --> 00:33:45.400
然后它都放在了一块

710
00:33:45.400 --> 00:33:48.400
好吧 先过吧

711
00:33:48.400 --> 00:33:49.400
这个大概是

712
00:33:49.400 --> 00:33:50.400
OK 行

713
00:33:50.400 --> 00:33:51.400
咱进入第四天

714
00:33:51.400 --> 00:33:53.400
第四天也是有一个主题

715
00:33:53.400 --> 00:33:56.400
是Dynamic

716
00:33:56.400 --> 00:33:57.400
OK

717
00:33:57.400 --> 00:33:58.400
然后这一天

718
00:33:58.400 --> 00:34:01.400
第四天主要还是讲了

719
00:34:01.400 --> 00:34:04.400
Vessel的核心产品

720
00:34:04.400 --> 00:34:05.400
NAS GS

721
00:34:05.400 --> 00:34:07.400
然后更新了13.4

722
00:34:07.400 --> 00:34:09.400
里边提到了几项功能

723
00:34:09.400 --> 00:34:11.400
通过在标题

724
00:34:11.400 --> 00:34:13.400
阅读这个介绍

725
00:34:13.400 --> 00:34:17.400
可以知道有四项内容

726
00:34:17.400 --> 00:34:18.400
有三种状态

727
00:34:18.400 --> 00:34:21.400
目前APP Router进入了稳定版

728
00:34:21.400 --> 00:34:23.400
然后进入Bit版本的

729
00:34:23.400 --> 00:34:24.400
有TurboPack

730
00:34:24.400 --> 00:34:27.400
然后在一些试验性的功能

731
00:34:27.400 --> 00:34:30.400
新增了缓存和服务端

732
00:34:30.400 --> 00:34:31.400
ServoAction

733
00:34:31.400 --> 00:34:34.400
这部分各位有了解吗

734
00:34:34.400 --> 00:34:36.400
这部分我了解的不多

735
00:34:36.400 --> 00:34:39.400
PHP吗

736
00:34:39.400 --> 00:34:46.400
是

737
00:34:46.400 --> 00:34:47.400
对

738
00:34:47.400 --> 00:34:48.400
之前我

739
00:34:48.400 --> 00:34:51.400
我有对NAS 3

740
00:34:51.400 --> 00:34:52.400
然后最近在写NAS 3

741
00:34:52.400 --> 00:34:55.400
然后能够慢慢的理解

742
00:34:55.400 --> 00:34:58.400
就是首先它核心重头戏是APP Root

743
00:34:58.400 --> 00:35:01.400
它提供了在Rest

744
00:35:01.400 --> 00:35:05.400
在Realtor去做

745
00:35:05.400 --> 00:35:07.400
路由的时候

746
00:35:07.400 --> 00:35:08.400
额外增强了一些内容

747
00:35:08.400 --> 00:35:10.400
比如它也提到了

748
00:35:10.400 --> 00:35:13.400
就是我们现在的

749
00:35:13.400 --> 00:35:15.400
使用更流畅了

750
00:35:15.400 --> 00:35:18.400
然后基于文件的路由

751
00:35:18.400 --> 00:35:19.400
更容易使用了

752
00:35:19.400 --> 00:35:21.400
去包括一些做嵌套

753
00:35:21.400 --> 00:35:23.400
和做一些布局的时候更容易了

754
00:35:23.400 --> 00:35:26.400
然后还有一些额外的

755
00:35:26.400 --> 00:35:28.400
它也提到了对

756
00:35:28.400 --> 00:35:31.400
也是比较出圈比较抱梗的

757
00:35:31.400 --> 00:35:33.400
Ret Server

758
00:35:33.400 --> 00:35:36.400
配合之前提到的Circle

759
00:35:36.400 --> 00:35:38.400
去写一些代码的时候

760
00:35:38.400 --> 00:35:41.400
就是一些互联网老鸟

761
00:35:41.400 --> 00:35:42.400
可能会有更熟悉的感觉

762
00:35:42.400 --> 00:35:44.400
还有一些额外的内容

763
00:35:44.400 --> 00:35:46.400
这个用的不是很多

764
00:35:46.400 --> 00:35:48.400
然后咱就不做额外的展开了

765
00:35:48.400 --> 00:35:50.400
额外还去提到了Torbo Pack

766
00:35:50.400 --> 00:35:53.400
这个也是咱去年

767
00:35:53.400 --> 00:35:55.400
是不是去年还是今年

768
00:35:55.400 --> 00:35:57.400
去年

769
00:35:57.400 --> 00:35:59.400
去年大火也是

770
00:35:59.400 --> 00:36:02.400
跟Made Speed那一块

771
00:36:02.400 --> 00:36:04.400
是的

772
00:36:04.400 --> 00:36:06.400
现在应该也是有一个更稳定

773
00:36:06.400 --> 00:36:09.400
或更细致的一个进化

774
00:36:09.400 --> 00:36:11.400
这部分我们也不做展开了

775
00:36:11.400 --> 00:36:13.400
刚才也提到了说

776
00:36:13.400 --> 00:36:15.400
这个Server Action

777
00:36:15.400 --> 00:36:17.400
然后这个好像说早了

778
00:36:17.400 --> 00:36:20.400
就是我们在做Server Config

779
00:36:20.400 --> 00:36:22.400
应该是写得更容易了

780
00:36:22.400 --> 00:36:26.400
这个山越理解吗

781
00:36:26.400 --> 00:36:28.400
Server Actions吗

782
00:36:28.400 --> 00:36:30.400
是

783
00:36:30.400 --> 00:36:34.400
它应该就是把一些KV

784
00:36:34.400 --> 00:36:40.400
数据库的一些SDK集成在了

785
00:36:40.400 --> 00:36:42.400
NAS.js中

786
00:36:42.400 --> 00:36:44.400
然后在前端这

787
00:36:44.400 --> 00:36:46.400
对它其实是一个Server Component

788
00:36:46.400 --> 00:36:48.400
它其实是一个服务器组件

789
00:36:48.400 --> 00:36:50.400
然后在这个上面可以

790
00:36:50.400 --> 00:36:51.400
做一些数据库的操作

791
00:36:51.400 --> 00:36:55.400
一些Redis的一些查询之类的

792
00:36:55.400 --> 00:36:57.400
这就是Server Action

793
00:36:57.400 --> 00:37:00.400
就是可以在NAS.js那边去

794
00:37:00.400 --> 00:37:04.400
就是在这个React的一个组件里面去发

795
00:37:04.400 --> 00:37:07.400
数据库的一些查询

796
00:37:07.400 --> 00:37:10.400
然后还有Redis的一些查询之类的

797
00:37:10.400 --> 00:37:13.400
对这个概念感觉蛮早

798
00:37:13.400 --> 00:37:15.400
前些年提出来的

799
00:37:15.400 --> 00:37:19.400
这个相当于是一个增强和改进

800
00:37:19.400 --> 00:37:22.400
对它这个Server Component确实是

801
00:37:22.400 --> 00:37:24.400
出来比较早

802
00:37:24.400 --> 00:37:26.400
但是它这次主要还是要和

803
00:37:26.400 --> 00:37:28.400
自己刚出来的这个产品

804
00:37:28.400 --> 00:37:32.400
就是它刚出来这个Server

805
00:37:32.400 --> 00:37:35.400
Verso KV,Verso Plugress

806
00:37:35.400 --> 00:37:39.400
还有Verso Config这些集成在一起主要是

807
00:37:39.400 --> 00:37:44.400
这也实现了咱也是比较容易出梗的地方

808
00:37:44.400 --> 00:37:47.400
有这个服务端组件的话

809
00:37:47.400 --> 00:37:49.400
我们再去编写这个页面

810
00:37:49.400 --> 00:37:52.400
去组织这个页面逻辑的时候

811
00:37:52.400 --> 00:37:55.400
一部分是给前端去做展示去做交互的

812
00:37:55.400 --> 00:37:58.400
一部分是给DB可能给后端的一些服务

813
00:37:58.400 --> 00:38:01.400
刚才提到这些数据库服务

814
00:38:01.400 --> 00:38:04.400
包括一些服务端的一些操作结合起来了

815
00:38:04.400 --> 00:38:07.400
实现了在一个单位件中出现了

816
00:38:07.400 --> 00:38:12.400
面向不同方向的代码逻辑

817
00:38:12.400 --> 00:38:14.400
好怪

818
00:38:14.400 --> 00:38:21.400
P2P感觉似曾相识亲切

819
00:38:21.400 --> 00:38:26.400
也验证了咱的体验是不断的螺旋上升

820
00:38:26.400 --> 00:38:29.400
之前没有这些复杂

821
00:38:29.400 --> 00:38:33.400
客户端渲染的时候是真正的SSR

822
00:38:33.400 --> 00:38:35.400
现在我们在不断演进之后

823
00:38:35.400 --> 00:38:38.400
又变成了2.0的SSR

824
00:38:38.400 --> 00:38:40.400
它比PHP强

825
00:38:40.400 --> 00:38:42.400
PHP有没有GSX

826
00:38:42.400 --> 00:38:48.400
但是它有标签语法

827
00:38:48.400 --> 00:38:52.400
用起来一样小循环

828
00:38:52.400 --> 00:38:58.400
人家写PHP的人为什么要会GSX

829
00:38:58.400 --> 00:39:04.400
之前只有这么一个成学艺术

830
00:39:04.400 --> 00:39:06.400
做写网页的

831
00:39:06.400 --> 00:39:08.400
它不分前后端

832
00:39:08.400 --> 00:39:11.400
随着咱对体验和性能和前端大发展

833
00:39:11.400 --> 00:39:13.400
我们分裂出了前端和后端

834
00:39:13.400 --> 00:39:15.400
负责不同的模块

835
00:39:15.400 --> 00:39:18.400
我们现在前端长本事了

836
00:39:18.400 --> 00:39:22.400
我们也尝试去囊括更多的能力

837
00:39:22.400 --> 00:39:25.400
解锁更多的API

838
00:39:25.400 --> 00:39:27.400
去做更多的事

839
00:39:27.400 --> 00:39:29.400
我们首先去想到了服务端

840
00:39:29.400 --> 00:39:30.400
也不奇怪

841
00:39:30.400 --> 00:39:32.400
前端独立出来之后

842
00:39:32.400 --> 00:39:36.400
又尝试去拿服务端的一些内容

843
00:39:36.400 --> 00:39:39.400
关键人家前后端都是用GS

844
00:39:39.400 --> 00:39:41.400
以前写PHP又得写GS

845
00:39:41.400 --> 00:39:42.400
又得写PHP

846
00:39:42.400 --> 00:39:45.400
还得写HTML

847
00:39:45.400 --> 00:39:48.400
想起之前写EGS

848
00:39:48.400 --> 00:39:51.400
写标签语法的时光

849
00:39:51.400 --> 00:39:53.400
对GSP

850
00:39:53.400 --> 00:39:55.400
暴露年龄了

851
00:39:55.400 --> 00:39:58.400
第四天其实是刚才提到的

852
00:39:58.400 --> 00:40:00.400
还是更多的是NASGS

853
00:40:00.400 --> 00:40:02.400
新版本的

854
00:40:02.400 --> 00:40:04.400
目前这个新突出版本的一些概念

855
00:40:04.400 --> 00:40:05.400
有些是稳定了

856
00:40:05.400 --> 00:40:08.400
有些是正在开始尝试去做推广

857
00:40:08.400 --> 00:40:10.400
然后我们来到第五天

858
00:40:10.400 --> 00:40:11.400
第五天去讲生态

859
00:40:11.400 --> 00:40:13.400
这部分琢磨也不多

860
00:40:13.400 --> 00:40:14.400
提到了两个例子

861
00:40:14.400 --> 00:40:17.400
一个是和这个CLERK

862
00:40:17.400 --> 00:40:19.400
这应该在前两天

863
00:40:19.400 --> 00:40:22.400
在之前授权的时候提到了

864
00:40:22.400 --> 00:40:23.400
它是一个捐钱服务

865
00:40:23.400 --> 00:40:25.400
然后也提到了NAS

866
00:40:25.400 --> 00:40:28.400
也就是咱VoE背后的

867
00:40:28.400 --> 00:40:31.400
这个全战解决方案NAS

868
00:40:31.400 --> 00:40:35.400
这部分有什么新东西

869
00:40:35.400 --> 00:40:38.400
山悦了解吗

870
00:40:38.400 --> 00:40:40.400
应该没有

871
00:40:40.400 --> 00:40:42.400
它主要是一个竞选系统的

872
00:40:42.400 --> 00:40:46.400
一个集场主要是

873
00:40:46.400 --> 00:40:47.400
对

874
00:40:47.400 --> 00:40:49.400
什么时候把Angular给并进来

875
00:40:49.400 --> 00:40:52.400
为什么通篇不提Angular

876
00:40:52.400 --> 00:40:56.400
这个我也能想到

877
00:40:56.400 --> 00:41:01.400
因为比如它在提到NAS的时候

878
00:41:01.400 --> 00:41:04.400
NAS能够去支持这个KV

879
00:41:04.400 --> 00:41:07.400
它用的很巧妙就是支持KV

880
00:41:07.400 --> 00:41:08.400
但没提别的

881
00:41:08.400 --> 00:41:11.400
是因为在NAS的设计之初

882
00:41:11.400 --> 00:41:13.400
NAS3文档里边就提到了

883
00:41:13.400 --> 00:41:16.400
它允许使用Storage

884
00:41:16.400 --> 00:41:18.400
UseHook这个方法

885
00:41:18.400 --> 00:41:20.400
你去接那个适配层

886
00:41:20.400 --> 00:41:22.400
比如我想去set一个东西

887
00:41:22.400 --> 00:41:23.400
去get一个东西

888
00:41:23.400 --> 00:41:25.400
那我如果填FS的话

889
00:41:25.400 --> 00:41:27.400
就FireSystem的话

890
00:41:27.400 --> 00:41:30.400
就可以我就是set A=B

891
00:41:30.400 --> 00:41:32.400
那我就可以真的去再

892
00:41:32.400 --> 00:41:34.400
用Linux Node.js去

893
00:41:34.400 --> 00:41:36.400
把某一个文件把它给更新了

894
00:41:36.400 --> 00:41:38.400
去读的话也是读这个文件

895
00:41:38.400 --> 00:41:40.400
它也很容易去接入这个Redis

896
00:41:40.400 --> 00:41:41.400
因为APS相近的

897
00:41:41.400 --> 00:41:45.400
所以现在它这个去推广

898
00:41:45.400 --> 00:41:46.400
WinCard的KV的时候

899
00:41:46.400 --> 00:41:48.400
也很容易在NAS中

900
00:41:48.400 --> 00:41:50.400
去实现这个兼容

901
00:41:50.400 --> 00:41:53.400
在具体的用法是NAS里边

902
00:41:53.400 --> 00:41:55.400
去在做那个适配器的时候

903
00:41:55.400 --> 00:41:57.400
专门去使用这个KV

904
00:41:57.400 --> 00:41:59.400
那就实现了KV能力的防卫

905
00:41:59.400 --> 00:42:02.400
更多的也是像它提到的

906
00:42:02.400 --> 00:42:03.400
这个一样生态

907
00:42:03.400 --> 00:42:06.400
就是Vessel作为知名的

908
00:42:06.400 --> 00:42:10.400
全球知名的前端大企业

909
00:42:10.400 --> 00:42:11.400
那也是开放的

910
00:42:11.400 --> 00:42:13.400
能够开放更多的技术能力

911
00:42:13.400 --> 00:42:15.400
让第三方框架

912
00:42:15.400 --> 00:42:16.400
不光是自己的亲儿子

913
00:42:16.400 --> 00:42:19.400
第三方框架也能够使用更多的能力

914
00:42:19.400 --> 00:42:21.400
对咱整体怎么说

915
00:42:21.400 --> 00:42:24.400
前端全体的成绩也是受益的

916
00:42:24.400 --> 00:42:26.400
那特殊PAC什么时候

917
00:42:26.400 --> 00:42:27.400
支持VV

918
00:42:27.400 --> 00:42:32.400
推测估计还是立刻去搜索

919
00:42:32.400 --> 00:42:36.400
Community社区支持

920
00:42:36.400 --> 00:42:39.400
OK 咱其实相当于速通了一下

921
00:42:39.400 --> 00:42:41.400
这5天具体有哪些内容

922
00:42:41.400 --> 00:42:44.400
每天哪些内容里边有哪些用

923
00:42:44.400 --> 00:42:47.400
然后咱也尝试和接地气的方式解释了

924
00:42:47.400 --> 00:42:50.400
可能并不完全准确的去解释了

925
00:42:50.400 --> 00:42:52.400
每项能力有哪些作用

926
00:42:52.400 --> 00:42:54.400
对咱有什么关系

927
00:42:54.400 --> 00:42:55.400
我听下来

928
00:42:55.400 --> 00:42:58.400
各位跟下来感受怎么样

929
00:42:58.400 --> 00:43:02.400
这一套发布会有趣吗

930
00:43:02.400 --> 00:43:07.400
没意思

931
00:43:07.400 --> 00:43:11.400
我对Severless不感冒

932
00:43:11.400 --> 00:43:13.400
怎么说

933
00:43:14.400 --> 00:43:17.400
我觉得这不是一个正确的发展方向

934
00:43:17.400 --> 00:43:21.400
不如前端以此后端当例

935
00:43:21.400 --> 00:43:23.400
大家赶紧抓紧时间转后端

936
00:43:23.400 --> 00:43:30.400
山越呢

937
00:43:30.400 --> 00:43:33.400
对这个主要是我感觉

938
00:43:33.400 --> 00:43:35.400
我们先看NASTA

939
00:43:35.400 --> 00:43:38.400
就是VOSO它本身自己的定位

940
00:43:38.400 --> 00:43:41.400
就是它其实定位

941
00:43:41.400 --> 00:43:44.400
它就是它做过NASDAJS

942
00:43:44.400 --> 00:43:48.400
然后做过SWRE系列很火的前端工具

943
00:43:48.400 --> 00:43:50.400
还有刚才说的TurboRap

944
00:43:50.400 --> 00:43:51.400
但是它更准确定位

945
00:43:51.400 --> 00:43:54.400
应该是一个服务器厂商

946
00:43:54.400 --> 00:43:57.400
就可以理解为它是R连那样

947
00:43:57.400 --> 00:44:01.400
但是它是比R连更上一层

948
00:44:01.400 --> 00:44:04.400
Netlify应该是一个竞争对手

949
00:44:04.400 --> 00:44:05.400
对

950
00:44:05.400 --> 00:44:07.400
然后它是做一些网站托管的

951
00:44:07.400 --> 00:44:10.400
然后就或许换换句一个不好听的话

952
00:44:10.400 --> 00:44:12.400
就说它是卖服务器的

953
00:44:12.400 --> 00:44:16.400
所以它现在才在自己的系统上

954
00:44:16.400 --> 00:44:19.400
集成了很多服务器的一些能力

955
00:44:19.400 --> 00:44:20.400
比如说一些Redis

956
00:44:20.400 --> 00:44:23.400
比如说就像是它的KV

957
00:44:23.400 --> 00:44:25.400
它是基于AppsDash去做的

958
00:44:25.400 --> 00:44:26.400
可以看到它的简介

959
00:44:26.400 --> 00:44:27.400
它是AppsDash

960
00:44:27.400 --> 00:44:30.400
就是做一些Redis托管的一个

961
00:44:30.400 --> 00:44:32.400
就是Redis服务提供商

962
00:44:32.400 --> 00:44:34.400
也是做云服务的

963
00:44:34.400 --> 00:44:35.400
然后合作的

964
00:44:35.400 --> 00:44:38.400
然后像Glob

965
00:44:38.400 --> 00:44:41.400
它是和Cloudflare R2去合作的

966
00:44:41.400 --> 00:44:43.400
也是做对象总统的

967
00:44:43.400 --> 00:44:44.400
也是做云服务商的

968
00:44:44.400 --> 00:44:46.400
然后还有刚才的Posgres

969
00:44:46.400 --> 00:44:49.400
它是和另外一家Nin去合作的

970
00:44:49.400 --> 00:44:51.400
它也是做云服务商的

971
00:44:51.400 --> 00:44:53.400
然后刚才CMS

972
00:44:53.400 --> 00:44:55.400
这可以说是云服务商吗

973
00:44:55.400 --> 00:44:56.400
其实也可以说

974
00:44:56.400 --> 00:44:58.400
所以感觉就是

975
00:44:58.400 --> 00:45:00.400
因为它的赚钱的能力

976
00:45:00.400 --> 00:45:02.400
就是都是在这些云服务器上

977
00:45:02.400 --> 00:45:04.400
我们赚钱的话就是

978
00:45:04.400 --> 00:45:06.400
我们在它的网站上

979
00:45:06.400 --> 00:45:09.400
在Volso上托管的应用

980
00:45:09.400 --> 00:45:11.400
它有多少流量

981
00:45:11.400 --> 00:45:13.400
然后它的执行的时间

982
00:45:13.400 --> 00:45:17.400
就是它有一个Build Time

983
00:45:17.400 --> 00:45:20.400
然后总共可以打多少小时这样子

984
00:45:20.400 --> 00:45:22.400
所以我觉得它这是为了

985
00:45:22.400 --> 00:45:27.400
更以大地去拓展自己的一些

986
00:45:27.400 --> 00:45:30.400
就是业务范围去做的一些事情

987
00:45:30.400 --> 00:45:33.400
总结一下就是恰饭

988
00:45:33.400 --> 00:45:37.400
就是拓展自己的业务范围

989
00:45:37.400 --> 00:45:41.400
因为这是人家本业嘛对吧

990
00:45:41.400 --> 00:45:43.400
所以我觉得就是Volso

991
00:45:43.400 --> 00:45:45.400
比如说它做NetJS起初

992
00:45:45.400 --> 00:45:48.400
其实就是为了更好地去卖

993
00:45:48.400 --> 00:45:50.400
它自己的服务器这样子

994
00:45:50.400 --> 00:45:52.400
然后它一直都在

995
00:45:52.400 --> 00:45:54.400
为了更好地卖自己的服务器

996
00:45:54.400 --> 00:45:56.400
一直在推动前端

997
00:45:56.400 --> 00:45:59.400
生态工具链的一些发展

998
00:45:59.400 --> 00:46:01.400
因为它做的是一些前端

999
00:46:01.400 --> 00:46:04.400
应用托管的一些事情

1000
00:46:04.400 --> 00:46:09.400
对然后山悦刚才讲的很好

1001
00:46:09.400 --> 00:46:12.400
也印证了串起了我们之前

1002
00:46:12.400 --> 00:46:13.400
看到的一些消息

1003
00:46:13.400 --> 00:46:16.400
比如之前会时不时的看到

1004
00:46:16.400 --> 00:46:18.400
某些优秀的网红程序

1005
00:46:18.400 --> 00:46:20.400
或说优秀的酷的作者

1006
00:46:20.400 --> 00:46:23.400
会宣布加入到Volso里边去

1007
00:46:23.400 --> 00:46:26.400
去投入到不同项目的开发

1008
00:46:26.400 --> 00:46:29.400
然后近些年Volso也是在

1009
00:46:29.400 --> 00:46:31.400
对前端产生了无论是开源

1010
00:46:31.400 --> 00:46:33.400
还是说前端进步

1011
00:46:33.400 --> 00:46:36.400
也产生了做出了不少

1012
00:46:36.400 --> 00:46:38.400
体感很好的一些产品

1013
00:46:38.400 --> 00:46:40.400
无论是它这个托管平台

1014
00:46:40.400 --> 00:46:42.400
然后使用非常简洁

1015
00:46:42.400 --> 00:46:43.400
也非常容易

1016
00:46:43.400 --> 00:46:46.400
还是说提到的那些NetJS

1017
00:46:46.400 --> 00:46:48.400
这些打包工具

1018
00:46:48.400 --> 00:46:49.400
去Modern Report的一些工具

1019
00:46:49.400 --> 00:46:52.400
还是说它开源的这些产品

1020
00:46:52.400 --> 00:46:56.400
都能对咱前端的开发

1021
00:46:56.400 --> 00:46:58.400
有极大的一个利好吧

1022
00:46:58.400 --> 00:46:59.400
或者说提供了更好的

1023
00:46:59.400 --> 00:47:00.400
更多的选择

1024
00:47:00.400 --> 00:47:04.400
也一定程度上让咱这个前端

1025
00:47:04.400 --> 00:47:06.400
解放了更多的能力

1026
00:47:06.400 --> 00:47:07.400
然后它提供的服务

1027
00:47:07.400 --> 00:47:09.400
提供的这个竞争力强

1028
00:47:09.400 --> 00:47:13.400
也会让同行去像我们刚才提到的

1029
00:47:13.400 --> 00:47:14.400
反复提到的几个竞争对手

1030
00:47:14.400 --> 00:47:17.400
也会去让他们去

1031
00:47:17.400 --> 00:47:19.400
就是提供更好的这个服务

1032
00:47:19.400 --> 00:47:21.400
从作为一个厂商

1033
00:47:21.400 --> 00:47:25.400
他还是想做更好的这个商业化

1034
00:47:25.400 --> 00:47:27.400
然后作为一些有技术

1035
00:47:27.400 --> 00:47:28.400
有理想的人

1036
00:47:28.400 --> 00:47:31.400
他还是想从开源或从技术入手

1037
00:47:31.400 --> 00:47:33.400
然后扩大他自己的影响力

1038
00:47:33.400 --> 00:47:37.400
说得好

1039
00:47:37.400 --> 00:47:43.400
我想说一下我的想法

1040
00:47:43.400 --> 00:47:47.400
就是其实刚开始前面那个发布

1041
00:47:47.400 --> 00:47:48.400
制玩意发布的时候

1042
00:47:48.400 --> 00:47:51.400
其实感觉还是挺有意思的

1043
00:47:51.400 --> 00:47:53.400
后面玩了一下我感觉

1044
00:47:53.400 --> 00:47:56.400
他这个就前面我听了一下

1045
00:47:56.400 --> 00:47:58.400
他3月讲的那个他的定位

1046
00:47:58.400 --> 00:48:00.400
然后再结合一下实际长期

1047
00:48:00.400 --> 00:48:02.400
我感觉挺尴尬的

1048
00:48:02.400 --> 00:48:05.400
就是像我们前端开发者

1049
00:48:05.400 --> 00:48:07.400
这东西大概率不是大概率

1050
00:48:07.400 --> 00:48:09.400
就是面向前端开发者的

1051
00:48:09.400 --> 00:48:14.400
然后我们对于普通个人级的项目

1052
00:48:14.400 --> 00:48:19.400
其实我觉得一般就博客

1053
00:48:19.400 --> 00:48:21.400
或者一些小的那种应用

1054
00:48:21.400 --> 00:48:25.400
然后对于企业级应用

1055
00:48:25.400 --> 00:48:28.400
我觉得更大概率还是会选择

1056
00:48:28.400 --> 00:48:31.400
想有一个成熟的后端

1057
00:48:31.400 --> 00:48:34.400
因为我感觉他这个东西怎么说呢

1058
00:48:34.400 --> 00:48:40.400
他有数据库redis和文件存储这一层

1059
00:48:40.400 --> 00:48:46.400
但实际上对于后端的

1060
00:48:46.400 --> 00:48:48.400
对于后端的工作的替代来说

1061
00:48:48.400 --> 00:48:49.400
我觉得不仅仅是这些API

1062
00:48:49.400 --> 00:48:51.400
就可以直接替代掉的

1063
00:48:51.400 --> 00:48:52.400
所以我个人理解

1064
00:48:52.400 --> 00:48:55.400
就觉得对我来说有点尴尬

1065
00:48:55.400 --> 00:48:58.400
好像比较复杂一点的项目又用不上

1066
00:48:58.400 --> 00:49:00.400
简单一点的用它也没意义

1067
00:49:00.400 --> 00:49:02.400
就有一种这种感觉

1068
00:49:02.400 --> 00:49:06.400
这部分也有新的想法

1069
00:49:06.400 --> 00:49:10.400
其实没有一个一项提供的服务

1070
00:49:10.400 --> 00:49:12.400
能够满足所有的需求

1071
00:49:12.400 --> 00:49:13.400
他作为一个

1072
00:49:13.400 --> 00:49:15.400
他可能更多的去想

1073
00:49:15.400 --> 00:49:17.400
把这个vessel做成一个动词

1074
00:49:17.400 --> 00:49:19.400
我们前端随手起一个

1075
00:49:19.400 --> 00:49:21.400
个人的私人的项目

1076
00:49:21.400 --> 00:49:23.400
我们用vessel一下就把它给布上去了

1077
00:49:23.400 --> 00:49:26.400
体感是流畅的顺畅的

1078
00:49:26.400 --> 00:49:28.400
我们作为一个小团队就几个人

1079
00:49:28.400 --> 00:49:31.400
可以选择vessel这个平台

1080
00:49:31.400 --> 00:49:33.400
使用它提供的托管能力

1081
00:49:33.400 --> 00:49:34.400
使用它提供的安全防护

1082
00:49:34.400 --> 00:49:37.400
使用它提供的这些DB存储

1083
00:49:37.400 --> 00:49:39.400
我们也能用很低的成本

1084
00:49:39.400 --> 00:49:40.400
很低的账单

1085
00:49:40.400 --> 00:49:43.400
来实现咱流量的第一步

1086
00:49:43.400 --> 00:49:47.400
我们可以立刻做一个电商网站

1087
00:49:47.400 --> 00:49:48.400
就开始卖东西

1088
00:49:48.400 --> 00:49:51.400
当咱这个网站做的足够大

1089
00:49:51.400 --> 00:49:54.400
或说这个服务足够复杂

1090
00:49:54.400 --> 00:49:56.400
无论是代码

1091
00:49:56.400 --> 00:49:58.400
还是说服务的这些建造性

1092
00:49:58.400 --> 00:50:00.400
甚至说这个账单

1093
00:50:00.400 --> 00:50:02.400
都开始这么说

1094
00:50:02.400 --> 00:50:04.400
就是性价比变低的时候

1095
00:50:04.400 --> 00:50:06.400
可能就可以考虑把它迁出去

1096
00:50:06.400 --> 00:50:09.400
比如说咱使用更多的

1097
00:50:09.400 --> 00:50:12.400
那种第三方的服务商

1098
00:50:12.400 --> 00:50:14.400
Redis我就不使用vessel提供的

1099
00:50:14.400 --> 00:50:16.400
或者说它指定的那一家

1100
00:50:16.400 --> 00:50:18.400
我们可以有更多的选择

1101
00:50:18.400 --> 00:50:21.400
我感觉咱在上一期提

1102
00:50:21.400 --> 00:50:22.400
还没发出来

1103
00:50:22.400 --> 00:50:24.400
咱在上一期提Slog的时候

1104
00:50:24.400 --> 00:50:26.400
你看就是用很少的人力

1105
00:50:26.400 --> 00:50:27.400
就实现了

1106
00:50:27.400 --> 00:50:30.400
快速跑通了它想要的这个服务

1107
00:50:30.400 --> 00:50:33.400
整体上也是使用

1108
00:50:33.400 --> 00:50:34.400
对于它一个怎么说

1109
00:50:34.400 --> 00:50:36.400
小小的创业者来说

1110
00:50:36.400 --> 00:50:38.400
他想提供一个产品的话

1111
00:50:38.400 --> 00:50:42.400
首先选择使用vessel提供其他的服务

1112
00:50:42.400 --> 00:50:44.400
先使用亲儿子NASJS

1113
00:50:44.400 --> 00:50:46.400
我开始使用

1114
00:50:46.400 --> 00:50:48.400
去把这个网站的钱往哪跑起来

1115
00:50:48.400 --> 00:50:50.400
我需要用到上传

1116
00:50:50.400 --> 00:50:52.400
需要用到数据存储

1117
00:50:52.400 --> 00:50:54.400
需要用到一些安全防务的时候

1118
00:50:54.400 --> 00:50:57.400
这一个作为我使用的主力的托尔文商

1119
00:50:57.400 --> 00:50:59.400
它提供这样的服务

1120
00:50:59.400 --> 00:51:01.400
那就很自然去选择了

1121
00:51:01.400 --> 00:51:04.400
吃掉的也是这部分受众

1122
00:51:04.400 --> 00:51:07.400
你刚刚其实忽略了一个

1123
00:51:07.400 --> 00:51:10.400
很重要的点子就是迁移成本

1124
00:51:10.400 --> 00:51:13.400
你像按照它发布的这些

1125
00:51:13.400 --> 00:51:16.400
比如KVA、Fosgres这些库

1126
00:51:16.400 --> 00:51:19.400
将来就是说你体量增长以后

1127
00:51:19.400 --> 00:51:21.400
如果你要迁移的话

1128
00:51:21.400 --> 00:51:23.400
你的前后端代码都不能用

1129
00:51:23.400 --> 00:51:27.400
对吧

1130
00:51:27.400 --> 00:51:30.400
对于刚才小白菜的两个问题

1131
00:51:30.400 --> 00:51:34.400
然后我可以试着对回答一下

1132
00:51:34.400 --> 00:51:36.400
它这其实是两部分的内容

1133
00:51:36.400 --> 00:51:39.400
就是刚才第一它是提供了一些

1134
00:51:39.400 --> 00:51:42.400
就是一些数据存储的一些能力

1135
00:51:42.400 --> 00:51:45.400
然后第二它是把一些数据存储的能力

1136
00:51:45.400 --> 00:51:47.400
然后集成在NAS.js中

1137
00:51:47.400 --> 00:51:50.400
然后NAS.js它有一些操作

1138
00:51:50.400 --> 00:51:52.400
一些数据库就在上面

1139
00:51:52.400 --> 00:51:54.400
作为一个服务端组件去做

1140
00:51:54.400 --> 00:51:56.400
它这其实两方面的事情

1141
00:51:56.400 --> 00:51:58.400
它对于第一方面

1142
00:51:58.400 --> 00:52:00.400
它其实第二方面只是一个补充

1143
00:52:00.400 --> 00:52:02.400
它其实只是开发了一个

1144
00:52:02.400 --> 00:52:03.400
Node上的一些SDK

1145
00:52:03.400 --> 00:52:05.400
它可以做这个事情

1146
00:52:05.400 --> 00:52:07.400
但它其实是做

1147
00:52:07.400 --> 00:52:09.400
它是一个云服务器厂商

1148
00:52:09.400 --> 00:52:10.400
它是做serverless

1149
00:52:10.400 --> 00:52:11.400
然后做网站托管的

1150
00:52:11.400 --> 00:52:14.400
它其实除了Node.js它还有Go

1151
00:52:14.400 --> 00:52:17.400
还有其他的语言去做这个事情

1152
00:52:17.400 --> 00:52:19.400
然后刚才说的NAS.js

1153
00:52:19.400 --> 00:52:22.400
它其实只是我们熟悉的一种方案

1154
00:52:22.400 --> 00:52:25.400
但它其实还是可以专门写一个NodeServer

1155
00:52:25.400 --> 00:52:29.400
就直接里边直接是Node去做这个事情

1156
00:52:29.400 --> 00:52:31.400
所以它前后端它是可以分离开的

1157
00:52:31.400 --> 00:52:33.400
但是它上面写的例子

1158
00:52:33.400 --> 00:52:35.400
它是放在一块了

1159
00:52:35.400 --> 00:52:39.400
所以对所以这是两个事情

1160
00:52:39.400 --> 00:52:41.400
而且对于刚开始说的那个事情

1161
00:52:41.400 --> 00:52:43.400
就是对于我们

1162
00:52:43.400 --> 00:52:45.400
我们是用不到我们是肯定用不到

1163
00:52:45.400 --> 00:52:47.400
因为它这个的目标用户也不是我们

1164
00:52:47.400 --> 00:52:49.400
比如说我现在在我手上

1165
00:52:49.400 --> 00:52:52.400
估计都快有100个项目

1166
00:52:52.400 --> 00:52:54.400
但是我也没有付费

1167
00:52:54.400 --> 00:52:55.400
为什么因为我的流量

1168
00:52:55.400 --> 00:52:57.400
还有我的就是构建时间

1169
00:52:57.400 --> 00:52:59.400
就是每次它去打包去构建

1170
00:52:59.400 --> 00:53:02.400
这个时间都不足以让我付费

1171
00:53:02.400 --> 00:53:04.400
它的一些目标用户都是一些

1172
00:53:04.400 --> 00:53:07.400
就是流量比较高

1173
00:53:07.400 --> 00:53:11.400
然后对这些有需求的人去做的这个事情

1174
00:53:11.400 --> 00:53:15.400
然后比如说但是他们肯定是有一些数据

1175
00:53:15.400 --> 00:53:16.400
存储的一些需求

1176
00:53:16.400 --> 00:53:18.400
但他们有数据存储以前是怎么做

1177
00:53:18.400 --> 00:53:21.400
比如他们以前是直接去接刚才的apps-

1178
00:53:21.400 --> 00:53:23.400
或直接去接Nin

1179
00:53:23.400 --> 00:53:25.400
但它这里边有一个问题是什么

1180
00:53:25.400 --> 00:53:28.400
就是一个安全的一个问题

1181
00:53:28.400 --> 00:53:30.400
就是我要接apps-

1182
00:53:30.400 --> 00:53:33.400
那我必须把apps-这个地址我暴露在

1183
00:53:33.400 --> 00:53:35.400
官网让所有人都能访问到

1184
00:53:35.400 --> 00:53:37.400
那让所有人都能访问到的话

1185
00:53:37.400 --> 00:53:39.400
那它就有一个安全的问题

1186
00:53:39.400 --> 00:53:41.400
那我能不能只让vossl访问到

1187
00:53:41.400 --> 00:53:42.400
因为这是不能的

1188
00:53:42.400 --> 00:53:44.400
因为vossl它是做一个云服务器厂商的

1189
00:53:44.400 --> 00:53:46.400
它的ip地址是很多的

1190
00:53:46.400 --> 00:53:48.400
因为它会复载均衡

1191
00:53:48.400 --> 00:53:50.400
你在那边是没办法去指定

1192
00:53:50.400 --> 00:53:54.400
是没办法比如说在apps-那边指定

1193
00:53:54.400 --> 00:53:55.400
这个ip白名单

1194
00:53:55.400 --> 00:53:58.400
因为vossl它是做云服务器厂商

1195
00:53:58.400 --> 00:53:59.400
它的ip地址就很多

1196
00:53:59.400 --> 00:54:00.400
你根本就数不过来

1197
00:54:00.400 --> 00:54:02.400
但是vossl现在把数据存储

1198
00:54:02.400 --> 00:54:03.400
这块事就做了

1199
00:54:03.400 --> 00:54:06.400
而且还有它第二还是第三天

1200
00:54:06.400 --> 00:54:08.400
做的事情就是那个安全的问题

1201
00:54:08.400 --> 00:54:10.400
就是它会很好的就解决这个问题

1202
00:54:10.400 --> 00:54:11.400
那我这个数据库

1203
00:54:11.400 --> 00:54:13.400
那我就不会再放在官网

1204
00:54:13.400 --> 00:54:15.400
那我就只能让我的vossl集群

1205
00:54:15.400 --> 00:54:18.400
这个应用去访问这样子

1206
00:54:18.400 --> 00:54:23.400
对所以刚才说的那个迁移成本

1207
00:54:23.400 --> 00:54:28.400
所以如果我们作为全站来说的话

1208
00:54:28.400 --> 00:54:30.400
那肯定是没有迁移成本

1209
00:54:30.400 --> 00:54:34.400
但是它除了作为全站来做的话

1210
00:54:34.400 --> 00:54:37.400
它有可能去作为一个就是单独写前端

1211
00:54:37.400 --> 00:54:39.400
单独写后端来做

1212
00:54:39.400 --> 00:54:40.400
就是单独写一个node

1213
00:54:40.400 --> 00:54:42.400
然后去写一个serverless

1214
00:54:42.400 --> 00:54:44.400
然后直接部署在vossl上

1215
00:54:44.400 --> 00:54:46.400
然后它这上面会查数据库

1216
00:54:46.400 --> 00:54:47.400
然后会查redis

1217
00:54:47.400 --> 00:54:49.400
然后前端再单独写

1218
00:54:49.400 --> 00:54:53.400
或者使用现在比较流行的trpc去写这个事情

1219
00:54:53.400 --> 00:54:56.400
所以它这个就是策略还有很多

1220
00:54:56.400 --> 00:55:00.400
不会有一些前端去做这个事情

1221
00:55:00.400 --> 00:55:02.400
但是你刚才那观点我也很认同

1222
00:55:02.400 --> 00:55:03.400
就是前端它不可能

1223
00:55:03.400 --> 00:55:07.400
就是在net.js里边去做数据库这些事情

1224
00:55:07.400 --> 00:55:09.400
因为我们现在前端我们知道发展

1225
00:55:09.400 --> 00:55:11.400
就是它刚开始是前端

1226
00:55:11.400 --> 00:55:12.400
然后在前后端分裂

1227
00:55:12.400 --> 00:55:16.400
后来又是ssr又是bff

1228
00:55:16.400 --> 00:55:18.400
但是我们到了bff这一层的时候

1229
00:55:18.400 --> 00:55:22.400
我们bff只是把后端的一些接口给接了过来

1230
00:55:22.400 --> 00:55:25.400
然后可以做一些建设认证前移

1231
00:55:25.400 --> 00:55:27.400
就是你像用户登录在后端那边

1232
00:55:27.400 --> 00:55:29.400
然后现在放在我这边

1233
00:55:29.400 --> 00:55:31.400
然后再做一些数据的一些缓存

1234
00:55:31.400 --> 00:55:34.400
比如做redis然后缓存一些数据

1235
00:55:34.400 --> 00:55:38.400
但是它在这边也很少去操作数据库

1236
00:55:38.400 --> 00:55:42.400
但是我们现在直接就在前端里面去操作数据库

1237
00:55:42.400 --> 00:55:45.400
很明显这个就不是很现实的

1238
00:55:45.400 --> 00:55:46.400
对

1239
00:55:46.400 --> 00:55:48.400
这观点我还是比较认可的

1240
00:55:48.400 --> 00:55:52.400
就是前端现在不可能仅仅依靠它这个场面出来

1241
00:55:52.400 --> 00:55:53.400
就做这个东西

1242
00:55:53.400 --> 00:55:56.400
这更有可能是为那些全站去做准备的

1243
00:55:56.400 --> 00:55:58.400
准备的一些东西

1244
00:55:58.400 --> 00:56:06.400
刚才我甚至想你看在我们想做一个产品

1245
00:56:06.400 --> 00:56:08.400
想快速做验证

1246
00:56:08.400 --> 00:56:10.400
做mvp也好做pmf也好无所谓了

1247
00:56:10.400 --> 00:56:14.400
就是我们就可以在这个网站上用它提供能力

1248
00:56:14.400 --> 00:56:16.400
那我们快速去做实现

1249
00:56:16.400 --> 00:56:17.400
我们作为一个全站

1250
00:56:17.400 --> 00:56:19.400
它提供了这些数据库

1251
00:56:19.400 --> 00:56:23.400
我就不用东奔西跑去找去对接

1252
00:56:23.400 --> 00:56:27.400
然后提供了它作为一个sdk

1253
00:56:27.400 --> 00:56:29.400
它也自带了默认支持了一些

1254
00:56:29.400 --> 00:56:31.400
刚才咱提到一些安全防护

1255
00:56:31.400 --> 00:56:34.400
甚至说一些安全性的一些默认的策略

1256
00:56:34.400 --> 00:56:38.400
足够我们去方便去使用

1257
00:56:38.400 --> 00:56:41.400
也是它想做的一件事情

1258
00:56:41.400 --> 00:56:42.400
对

1259
00:56:42.400 --> 00:56:45.400
而且它这些现在是出no的sdk

1260
00:56:45.400 --> 00:56:49.400
它后续应该也会出go之类的一些sdk

1261
00:56:49.400 --> 00:56:51.400
应该会

1262
00:56:51.400 --> 00:56:57.400
在服务器上调五服务

1263
00:56:57.400 --> 00:57:03.400
如果它把sdk就像s3一样把它给尽早的推出来

1264
00:57:03.400 --> 00:57:04.400
尽早的公开化

1265
00:57:04.400 --> 00:57:07.400
那我们后续只能去模仿它

1266
00:57:07.400 --> 00:57:10.400
我使用@wether的kb的包

1267
00:57:10.400 --> 00:57:12.400
就引入了wether指定的redis

1268
00:57:12.400 --> 00:57:14.400
如果使用其他的redis服务

1269
00:57:14.400 --> 00:57:18.400
那我这服务商也只能是自己发一个相当的包

1270
00:57:18.400 --> 00:57:20.400
发一个自己的适配包

1271
00:57:20.400 --> 00:57:24.400
但API可能还是需要向wether靠齐

1272
00:57:24.400 --> 00:57:25.400
这样的话

1273
00:57:25.400 --> 00:57:27.400
潜移成本和使用成本就会降低

1274
00:57:27.400 --> 00:57:31.400
其他厂商也会去被动的去跟进这个事

1275
00:57:31.400 --> 00:57:32.400
是

1276
00:57:32.400 --> 00:57:35.400
而且我刚才好像看一下代码

1277
00:57:35.400 --> 00:57:38.400
它的wether_postgres那个包

1278
00:57:38.400 --> 00:57:40.400
就是wether_postgres那个sdk

1279
00:57:40.400 --> 00:57:44.400
它其实是一个postgres数据库就可以

1280
00:57:44.400 --> 00:57:47.400
但是需要对数据库做一些连接池的一些优化

1281
00:57:47.400 --> 00:57:53.400
所以它也不一定需要是wossel的数据库

1282
00:57:53.400 --> 00:57:55.400
所以等以后比如说你要迁移了

1283
00:57:55.400 --> 00:57:57.400
你想把数据库放在自己这里

1284
00:57:57.400 --> 00:57:58.400
因为我们毕竟在国内

1285
00:57:58.400 --> 00:58:00.400
那数据库要在新加坡

1286
00:58:00.400 --> 00:58:01.400
它其实也不是很方便

1287
00:58:01.400 --> 00:58:03.400
每次查询都会很慢

1288
00:58:03.400 --> 00:58:05.400
我们后续也可以把数据库直接放在国内

1289
00:58:05.400 --> 00:58:07.400
然后对数据库优化一下

1290
00:58:07.400 --> 00:58:09.400
然后直接改个地址就可以了

1291
00:58:09.400 --> 00:58:12.400
然后sdk还是用它的

1292
00:58:12.400 --> 00:58:14.400
这样子应该也可以

1293
00:58:14.400 --> 00:58:15.400
嗯

1294
00:58:15.400 --> 00:58:19.400
那还行啊听起来

1295
00:58:19.400 --> 00:58:22.400
其实刚才咱也引语约提到了一个

1296
00:58:22.400 --> 00:58:25.400
serverless里边提到的一个观点

1297
00:58:25.400 --> 00:58:30.400
就是厂商绑定或者说避免厂商绑定

1298
00:58:30.400 --> 00:58:35.400
咱刚才提到就像s3协议一说

1299
00:58:35.400 --> 00:58:39.400
那它可能定义了我们去做文件存储

1300
00:58:39.400 --> 00:58:40.400
对象存储的时候

1301
00:58:40.400 --> 00:58:42.400
使用的一个常见方案

1302
00:58:42.400 --> 00:58:44.400
那虽然我即便是阿里云、腾讯云

1303
00:58:44.400 --> 00:58:46.400
用了自己的一些特点或服务

1304
00:58:46.400 --> 00:58:49.400
但是为了更容易去做适配

1305
00:58:49.400 --> 00:58:54.400
那去和要和AWS和s3去做对齐

1306
00:58:54.400 --> 00:58:56.400
那就要出对应的sdk

1307
00:58:56.400 --> 00:59:01.400
甚至说我就要坚持使用AWS出的sdk

1308
00:59:01.400 --> 00:59:04.400
但在连接的时候去填阿里云、腾讯云的这些

1309
00:59:04.400 --> 00:59:07.400
连接信息那一样可以正常操作

1310
00:59:07.400 --> 00:59:11.400
刚才山悦提到那postgres它这个

1311
00:59:11.400 --> 00:59:15.400
公开了这些选项配置的话

1312
00:59:15.400 --> 00:59:17.400
那么也可以使用第三方的

1313
00:59:17.400 --> 00:59:18.400
只是使用它这个sdk

1314
00:59:18.400 --> 00:59:23.400
方便我们减少学习的这个API的成本

1315
00:59:23.400 --> 00:59:26.400
对,例如我一扫了一样的代码

1316
00:59:26.400 --> 00:59:29.400
然后应该是可以去写一个自己

1317
00:59:29.400 --> 00:59:31.400
比如自己本地提一个数据库

1318
00:59:31.400 --> 00:59:33.400
或者自己在阿里云买一个数据库

1319
00:59:33.400 --> 00:59:34.400
然后去连接

1320
00:59:34.400 --> 00:59:38.400
但这个数据库有可能是需要做一些优化之类

1321
00:59:38.400 --> 00:59:44.400
这也回到我最初提到说

1322
00:59:44.400 --> 00:59:47.400
这里边提到了发布了很多新的能力

1323
00:59:47.400 --> 00:59:49.400
无论是平台能力还是说它技术能力

1324
00:59:49.400 --> 00:59:52.400
更多的是以往的一些复杂概念

1325
00:59:52.400 --> 00:59:55.400
或比较繁琐概念的一个整合

1326
00:59:55.400 --> 00:59:59.400
说到底那我前端能够是操作数据库了

1327
00:59:59.400 --> 01:00:01.400
更多的是我们它接入了这个sdk

1328
01:00:01.400 --> 01:00:04.400
那么一个包就能使用这个包里边的内容了

1329
01:00:04.400 --> 01:00:12.400
它尽早推出来,对其他厂商也是一个宣示

1330
01:00:12.400 --> 01:00:15.400
其他厂商也会慢慢去跟进去放出来

1331
01:00:15.400 --> 01:00:19.400
对,而且它写的那个我觉得仅仅是一个示例

1332
01:00:19.400 --> 01:00:22.400
就代表我可以在这个里边做这个事情

1333
01:00:22.400 --> 01:00:25.400
但是肯定是不会有人这么去写的

1334
01:00:25.400 --> 01:00:27.400
现在谁还手写C-Core

1335
01:00:27.400 --> 01:00:29.400
基本上都是通过ORM去做

1336
01:00:29.400 --> 01:00:33.400
比如现在Prisma,然后Posgraf,Sqlize,

1337
01:00:33.400 --> 01:00:35.400
然后TypeORM这样子去做

1338
01:00:35.400 --> 01:00:40.400
然后或者它们数据库连接的话肯定也会写一些

1339
01:00:40.400 --> 01:00:46.400
就是会写一些就是实体呀,model呀之类的

1340
01:00:46.400 --> 01:00:49.400
这样子你才有那些单面补全之类的

1341
01:00:49.400 --> 01:00:53.400
这些东西然后才会有一些那些gamer之类的

1342
01:00:53.400 --> 01:00:57.400
对,所以我觉得它这个最后如果要大量使用的话

1343
01:00:57.400 --> 01:01:00.400
估计还是结合Prisma去使用

1344
01:01:00.400 --> 01:01:04.400
或者刚才我说的Sqlize或者TypeORM去使用

1345
01:01:04.400 --> 01:01:09.400
但是Prisma我觉得挺好用的,有可能就是和Prisma一块用

1346
01:01:09.400 --> 01:01:15.400
对,它写的那个示例我觉得它只是显示这样一样的能力

1347
01:01:15.400 --> 01:01:18.400
并不是说你要这样写,就是说我可以这样子

1348
01:01:18.400 --> 01:01:21.400
我可以在前端写一个server component

1349
01:01:21.400 --> 01:01:24.400
它可以直接查数据库,因为我写一个sql

1350
01:01:24.400 --> 01:01:29.400
大家都知道这是sql,但是你要是写一个RM比如Prisma

1351
01:01:29.400 --> 01:01:32.400
就是Prisma.user.fund1

1352
01:01:32.400 --> 01:01:35.400
大家都不知道这个是什么,就是有可能不知道这个是什么

1353
01:01:35.400 --> 01:01:38.400
有可能就是就是查找一个用户

1354
01:01:38.400 --> 01:01:40.400
但是你写一个sql,这就很明显是一个sql

1355
01:01:40.400 --> 01:01:44.400
让别人就一眼就可以看入它的这个能力是什么

1356
01:01:44.400 --> 01:01:49.400
对,我觉得可以参考一下那个Java的maptis

1357
01:01:49.400 --> 01:01:56.400
既有ORM,也可以去那个maptis

1358
01:01:56.400 --> 01:02:01.400
对,现在ORM基本上都支持让你手写的

1359
01:02:01.400 --> 01:02:08.400
做一些卖差区的优化的时候还是要去做那个手写sql这一块

1360
01:02:08.400 --> 01:02:12.400
咱刚才也反复提到了Prisma

1361
01:02:12.400 --> 01:02:17.400
感觉我们后续可以在单独对Prisma再做一个具体的展开

1362
01:02:17.400 --> 01:02:19.400
我们在之前采访嘉宾的时候

1363
01:02:19.400 --> 01:02:22.400
比如在slog那一期我们也提到了Prisma

1364
01:02:22.400 --> 01:02:23.400
反复提到了几次

1365
01:02:23.400 --> 01:02:26.400
我们日常在用的时候发现它效果确实好

1366
01:02:26.400 --> 01:02:32.400
而且Prisma提供的数据库适配性更多

1367
01:02:32.400 --> 01:02:35.400
然后我们学习的成本会更降低

1368
01:02:35.400 --> 01:02:39.400
刚才山月提到,我就这么fund1一个

1369
01:02:39.400 --> 01:02:43.400
你可能不能立刻就知道我是在操作观景数据库

1370
01:02:43.400 --> 01:02:45.400
还是在操作非观景数据库

1371
01:02:45.400 --> 01:02:53.400
刚才还想了一个点小时

1372
01:02:53.400 --> 01:03:08.400
往后展望的话应该也不意外再会有类似官方推出的产品之后会有一些典型的案例

1373
01:03:08.400 --> 01:03:11.400
可能我们假以时日吧,半年之后或几个月

1374
01:03:11.400 --> 01:03:15.400
之后可能会有一些优秀的案例厂商出来做分享

1375
01:03:15.400 --> 01:03:18.400
那么他们厂商接入了visa提供的这些能力

1376
01:03:18.400 --> 01:03:22.400
然后实现了无论是效率的提升还是安全防护的提升

1377
01:03:22.400 --> 01:03:24.400
或者说这个开发的体验更好

1378
01:03:24.400 --> 01:03:26.400
应该会有专门的介绍

1379
01:03:26.400 --> 01:03:30.400
到时候应该去对咱今天讲的某些特定的能力

1380
01:03:30.400 --> 01:03:32.400
会有一些特别的提升

1381
01:03:32.400 --> 01:03:35.400
然后我们也会在这些产品的产品上

1382
01:03:35.400 --> 01:03:45.400
有更深刻的认识和一些最佳的实践

1383
01:03:45.400 --> 01:03:50.400
我们刚才提到了很多技术名词

1384
01:03:50.400 --> 01:03:54.400
到时候我会把这些对应的链接和介绍放在那个show note里边

1385
01:03:54.400 --> 01:03:56.400
到时候听到这里的听众感兴趣的话

1386
01:03:56.400 --> 01:03:59.400
可以去关注这个咱提供的show note

1387
01:03:59.400 --> 01:04:03.400
然后做进一步的了解和熟悉和了解

1388
01:04:03.400 --> 01:04:13.400
我们刚才聊了蛮久

1389
01:04:13.400 --> 01:04:18.400
然后我们刚才尝试从visa ship这场发布会开始谈起

1390
01:04:18.400 --> 01:04:21.400
逐步的每一天解锁了哪些能力

1391
01:04:21.400 --> 01:04:25.400
我们做了一个展开也做了一些观点上的锐评

1392
01:04:25.400 --> 01:04:28.400
有些是正面的有些是负面的

1393
01:04:28.400 --> 01:04:30.400
那我们也很正常

1394
01:04:30.400 --> 01:04:33.400
这个产品推出来之后有不同的评价

1395
01:04:33.400 --> 01:04:36.400
我们依次捋下来之后最后我们也做了一个展望

1396
01:04:36.400 --> 01:04:39.400
这些技术本身不是新技术

1397
01:04:39.400 --> 01:04:41.400
更多是平台的整合

1398
01:04:41.400 --> 01:04:44.400
那么我们自然而然产生了一些疑虑

1399
01:04:44.400 --> 01:04:46.400
也有对应的答案

1400
01:04:46.400 --> 01:04:50.400
刚才小白菜和山月提供了很多有趣的观点

1401
01:04:50.400 --> 01:04:55.400
刚才刘威小白菜和山月提供了很多有趣的观点

1402
01:04:55.400 --> 01:04:59.400
我们听到这里也可以反复的去对这部分观点进行消化

1403
01:04:59.400 --> 01:05:04.400
也欢迎在评论区互动就是谈谈你的看法

1404
01:05:04.400 --> 01:05:09.400
行啊我是正常聊得非常开心非常兴奋的新保护

1405
01:05:09.400 --> 01:05:13.400
我是坚持反思维老师的刘威Frankie

1406
01:05:13.400 --> 01:05:20.400
我是已经在用我手跑项目的小白菜Frankie

1407
01:05:20.400 --> 01:05:33.400
我是山月

1408
01:05:33.400 --> 01:05:36.400
OK 行 最后还是感谢山月

1409
01:05:37.340 --> 01:05:38.400
谢谢

